components:
  schemas:
    AcceptNetPeeringRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NetPeeringId:
          description: The ID of the Net peering connection you want to accept.
          type: string
      required:
      - NetPeeringId
      type: object
    AcceptNetPeeringResponse:
      properties:
        NetPeering:
          $ref: '#/components/schemas/NetPeering'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    AccepterNet:
      description: Information about the accepter Net.
      properties:
        AccountId:
          description: The account ID of the owner of the accepter Net.
          type: string
        IpRange:
          description: The IP range for the accepter Net, in CIDR notation (for example, 10.0.0.0/16).
          type: string
        NetId:
          description: The ID of the accepter Net.
          type: string
      type: object
    AccessLog:
      description: Information about access logs.
      properties:
        IsEnabled:
          description: If `true`, access logs are enabled for your load balancer. If `false`, they are not. If you set this to `true` in your request, the OsuBucketName` parameter is required.
          type: boolean
        OsuBucketName:
          description: The name of the Object Storage Unit (OSU) bucket for the access logs.
          type: string
        OsuBucketPrefix:
          description: The path to the folder of the access logs in your Object Storage Unit (OSU) bucket (by default, the `root` level of your bucket).
          type: string
        PublicationInterval:
          description: The time interval for the publication of access logs in the Object Storage Unit (OSU) bucket, in minutes. This value can be either 5 or 60 (by default, 60).
          type: integer
      type: object
    ApplicationStickyCookiePolicy:
      description: Information about the stickiness policy.
      properties:
        CookieName:
          description: The name of the application cookie used for stickiness.
          type: string
        PolicyName:
          description: The mnemonic name for the policy being created. The name must be unique within a set of policies for this load balancer.
          type: string
      type: object
    BackendVmHealth:
      description: Information about the health of a back-end VM.
      properties:
        Description:
          description: The description of the state of the back-end VM.
          type: string
        State:
          description: The state of the back-end VM (`InService` \| `OutOfService` \| `Unknown`).
          type: string
        StateReason:
          description: 'Information about the cause of `OutOfService` VMs.<br />

            Specifically, whether the cause is Elastic Load Balancing or the VM (`ELB` \| `Instance` \| `N/A`).'
          type: string
        VmId:
          description: The ID of the back-end VM.
          type: string
      type: object
    BlockDeviceMappingCreated:
      description: Information about the created block device mapping.
      properties:
        Bsu:
          $ref: '#/components/schemas/BsuCreated'
        DeviceName:
          description: The name of the device.
          type: string
      type: object
    BlockDeviceMappingImage:
      description: One or more parameters used to automatically set up volumes when the VM is created.
      properties:
        Bsu:
          $ref: '#/components/schemas/BsuToCreate'
        DeviceName:
          description: The name of the device.
          type: string
        VirtualDeviceName:
          description: The name of the virtual device (ephemeralN).
          type: string
      type: object
    BlockDeviceMappingVmCreation:
      description: Information about the block device mapping.
      properties:
        Bsu:
          $ref: '#/components/schemas/BsuToCreate'
        DeviceName:
          description: The name of the device.
          type: string
        NoDevice:
          description: Suppresses the device which is included in the block device mapping of the OMI.
          type: string
        VirtualDeviceName:
          description: The name of the virtual device (ephemeralN).
          type: string
      type: object
    BlockDeviceMappingVmUpdate:
      description: Information about the block device mapping.
      properties:
        Bsu:
          $ref: '#/components/schemas/BsuToUpdateVm'
        DeviceName:
          description: The name of the device.
          type: string
        NoDevice:
          description: Suppresses the device which is included in the block device mapping of the OMI.
          type: string
        VirtualDeviceName:
          description: The name of the virtual device (ephemeralN).
          type: string
      type: object
    BsuCreated:
      description: Information about the created BSU volume.
      properties:
        DeleteOnVmDeletion:
          description: Set to `true` by default, which means that the volume is deleted when the VM is terminated. If set to `false`, the volume is not deleted when the VM is terminated.
          type: boolean
        LinkDate:
          description: The time and date of attachment of the volume to the VM.
          format: date
          type: string
        State:
          description: The state of the volume.
          type: string
        VolumeId:
          description: The ID of the volume.
          type: string
      type: object
    BsuToCreate:
      description: Information about the BSU volume to create.
      properties:
        DeleteOnVmDeletion:
          description: Set to `true` by default, which means that the volume is deleted when the VM is terminated. If set to `false`, the volume is not deleted when the VM is terminated.
          type: boolean
        Iops:
          description: The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000`.
          type: integer
        SnapshotId:
          description: The ID of the snapshot used to create the volume.
          type: string
        VolumeSize:
          description: 'The size of the volume, in gibibytes (GiB).<br />

            If you specify a snapshot ID, the volume size must be at least equal to the snapshot size.<br />

            If you specify a snapshot ID but no volume size, the volume is created with a size similar to the snapshot one.'
          type: integer
        VolumeType:
          description: 'The type of the volume (`standard` \| `io1` \| `gp2`). If not specified in the request, a `standard` volume is created.<br />

            For more information about volume types, see [Volume Types and IOPS](https://wiki.outscale.net/display/EN/About+Volumes#AboutVolumes-VolumeTypesVolumeTypesandIOPS).'
          type: string
      type: object
    BsuToUpdateVm:
      description: Information about the BSU volume.
      properties:
        DeleteOnVmDeletion:
          description: If `true`, the volume is deleted when the VM is terminated.
          type: boolean
        VolumeId:
          description: The ID of the volume.
          type: string
      type: object
    ClientGateway:
      description: Information about the client gateway.
      properties:
        BgpAsn:
          description: An unsigned 32-bits Autonomous System Number (ASN) used by the Border Gateway Protocol (BGP) to find out the path to your client gateway through the Internet network.
          type: integer
        ClientGatewayId:
          description: The ID of the client gateway.
          type: string
        ConnectionType:
          description: The type of communication tunnel used by the client gateway (only `ipsec.1` is supported).
          type: string
        PublicIp:
          description: The public IPv4 address of the client gateway (must be a fixed address into a NATed network).
          type: string
        State:
          description: The state of the client gateway (`pending` \| `available` \| `deleting` \| `deleted`).
          type: string
        Tags:
          description: One or more tags associated with the client gateway.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    CreateClientGatewayRequest:
      properties:
        BgpAsn:
          description: An unsigned 32-bits Autonomous System Number (ASN) used by the Border Gateway Protocol (BGP) to find out the path to your client gateway through the Internet network. The integer must be within the [0;4294967295] range. By default, 65000.
          type: integer
        ConnectionType:
          description: The communication protocol used to establish tunnel with your client gateway (only `ipsec.1` is supported).
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        PublicIp:
          description: The public fixed IPv4 address of your client gateway.
          type: string
      required:
      - BgpAsn
      - PublicIp
      - ConnectionType
      type: object
    CreateClientGatewayResponse:
      properties:
        ClientGateway:
          $ref: '#/components/schemas/ClientGateway'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateDhcpOptionsRequest:
      properties:
        DomainName:
          description: Specify a domain name (for example, MyCompany.com). You can specify only one domain name.
          type: string
        DomainNameServers:
          description: The IP addresses of domain name servers. If no IP addresses are specified, the OutscaleProvidedDNS value is set by default.
          items:
            type: string
          type: array
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NtpServers:
          description: The IP addresses of the Network Time Protocol (NTP) servers.
          items:
            type: string
          type: array
      type: object
    CreateDhcpOptionsResponse:
      properties:
        DhcpOptionsSet:
          $ref: '#/components/schemas/DhcpOptionsSet'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateDirectLinkInterfaceRequest:
      properties:
        DirectLinkId:
          description: The ID of the existing DirectLink for which you want to create the DirectLink interface.
          type: string
        DirectLinkInterface:
          $ref: '#/components/schemas/DirectLinkInterface'
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
      required:
      - DirectLinkId
      - DirectLinkInterface
      type: object
    CreateDirectLinkInterfaceResponse:
      properties:
        DirectLinkInterface:
          $ref: '#/components/schemas/DirectLinkInterfaces'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateDirectLinkRequest:
      properties:
        Bandwidth:
          description: The bandwidth of the DirectLink (`1GBps` \| `10GBps`).
          type: string
        DirectLinkName:
          description: The name of the DirectLink.
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Location:
          description: The code of the requested location for the DirectLink, returned by the [ReadLocations](#readlocations) method.
          type: string
      required:
      - Bandwidth
      - DirectLinkName
      - Location
      type: object
    CreateDirectLinkResponse:
      properties:
        DirectLink:
          $ref: '#/components/schemas/DirectLink'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateFlexibleGpuRequest:
      properties:
        DeleteOnVmDeletion:
          default: false
          description: If `true`, the fGPU is deleted when the VM is terminated.
          type: boolean
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        ModelName:
          description: The model of GPU you want to allocate.
          type: string
        SubregionName:
          description: The Subregion in which you want to create the fGPU.
          type: string
      required:
      - ModelName
      - SubregionName
      type: object
    CreateFlexibleGpuResponse:
      properties:
        FlexibleGpu:
          $ref: '#/components/schemas/FlexibleGpu'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateImageExportTaskRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        ImageId:
          description: The ID of the OMI to export.
          type: string
        OsuExport:
          $ref: '#/components/schemas/OsuExport'
      required:
      - OsuExport
      - ImageId
      type: object
    CreateImageExportTaskResponse:
      properties:
        ImageExportTask:
          $ref: '#/components/schemas/ImageExportTask'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateImageRequest:
      properties:
        Architecture:
          description: The architecture of the OMI (by default, `i386`).
          type: string
        BlockDeviceMappings:
          description: One or more block device mappings.
          items:
            $ref: '#/components/schemas/BlockDeviceMappingImage'
          type: array
        Description:
          description: A description for the new OMI.
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        FileLocation:
          description: The pre-signed URL of the OMI manifest file, or the full path to the OMI stored in an OSU bucket. If you specify this parameter, a copy of the OMI is created in your account.
          type: string
        ImageName:
          description: 'A unique name for the new OMI.<br />

            Constraints:  3–128 alphanumeric characters, underscores (_), spaces ( ), parentheses (()), slashes (/), periods (.), or dashes (-).'
          type: string
        NoReboot:
          description: If `false`, the VM shuts down before creating the OMI and then reboots. If `true`, the VM does not.
          type: boolean
        RootDeviceName:
          description: The name of the root device.
          type: string
        SourceImageId:
          description: The ID of the OMI you want to copy.
          type: string
        SourceRegionName:
          description: The name of the source Region, which must be the same as the Region of your account.
          type: string
        VmId:
          description: The ID of the VM from which you want to create the OMI.
          type: string
      type: object
    CreateImageResponse:
      properties:
        Image:
          $ref: '#/components/schemas/Image'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateInternetServiceRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
      type: object
    CreateInternetServiceResponse:
      properties:
        InternetService:
          $ref: '#/components/schemas/InternetService'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateKeypairRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        KeypairName:
          description: A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
          type: string
        PublicKey:
          description: The public key. If you are not using command line tools, it must be encoded in Base64.
          type: string
      required:
      - KeypairName
      type: object
    CreateKeypairResponse:
      properties:
        Keypair:
          $ref: '#/components/schemas/KeypairCreated'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateLoadBalancerListenersRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Listeners:
          description: One or more listeners for the load balancer.
          items:
            $ref: '#/components/schemas/ListenerForCreation'
          type: array
        LoadBalancerName:
          description: The name of the load balancer for which you want to create listeners.
          type: string
      required:
      - Listeners
      - LoadBalancerName
      type: object
    CreateLoadBalancerListenersResponse:
      properties:
        LoadBalancer:
          $ref: '#/components/schemas/LoadBalancer'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateLoadBalancerPolicyRequest:
      properties:
        CookieName:
          description: The name of the application cookie used for stickiness. This parameter is required if you create a stickiness policy based on an application-generated cookie.
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerName:
          description: The name of the load balancer for which you want to create a policy.
          type: string
        PolicyName:
          description: The name of the policy. This name must be unique and consist of alphanumeric characters and dashes (-).
          type: string
        PolicyType:
          description: 'The type of stickiness policy you want to create: `app` or `load_balancer`.'
          type: string
      required:
      - PolicyType
      - LoadBalancerName
      - PolicyName
      type: object
    CreateLoadBalancerPolicyResponse:
      properties:
        LoadBalancer:
          $ref: '#/components/schemas/LoadBalancer'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateLoadBalancerRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Listeners:
          description: One or more listeners to create.
          items:
            $ref: '#/components/schemas/ListenerForCreation'
          type: array
        LoadBalancerName:
          description: The unique name of the load balancer (32 alphanumeric or hyphen characters maximum, but cannot start or end with a hyphen).
          type: string
        LoadBalancerType:
          description: 'The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.'
          type: string
        SecurityGroups:
          description: 'One or more IDs of security groups you want to assign to the load balancer.<br />

            In a Net, this attribute is required. In the public Cloud, it is optional and default security groups can be applied. '
          items:
            type: string
          type: array
        Subnets:
          description: One or more IDs of Subnets in your Net that you want to attach to the load balancer.
          items:
            type: string
          type: array
        SubregionNames:
          description: The name(s) of the Subregion(s) (currently, only one Subregion is supported). This parameter is not required if you create a load balancer in a Net. To create an internal load balancer, use the `LoadBalancerType` parameter.
          items:
            type: string
          type: array
        Tags:
          description: One or more tags assigned to the load balancer.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      required:
      - Listeners
      - LoadBalancerName
      type: object
    CreateLoadBalancerResponse:
      properties:
        LoadBalancer:
          $ref: '#/components/schemas/LoadBalancer'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateNatServiceRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        PublicIpId:
          description: 'The allocation ID of the EIP to associate with the NAT service.<br />

            If the EIP is already associated with another resource, you must first disassociate it.'
          type: string
        SubnetId:
          description: The ID of the Subnet in which you want to create the NAT service.
          type: string
      required:
      - PublicIpId
      - SubnetId
      type: object
    CreateNatServiceResponse:
      properties:
        NatService:
          $ref: '#/components/schemas/NatService'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateNetAccessPointRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NetId:
          description: The ID of the Net.
          type: string
        RouteTableIds:
          description: One or more IDs of route tables to use for the connection.
          items:
            type: string
          type: array
        ServiceName:
          description: The prefix list name corresponding to the service (for example, `com.outscale.eu-west-2.osu` for OSU).
          type: string
      required:
      - ServiceName
      - NetId
      type: object
    CreateNetAccessPointResponse:
      properties:
        NetAccessPoint:
          $ref: '#/components/schemas/NetAccessPoint'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateNetPeeringRequest:
      properties:
        AccepterNetId:
          description: The ID of the Net you want to connect with.
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        SourceNetId:
          description: The ID of the Net you send the peering request from.
          type: string
      required:
      - AccepterNetId
      - SourceNetId
      type: object
    CreateNetPeeringResponse:
      properties:
        NetPeering:
          $ref: '#/components/schemas/NetPeering'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateNetRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        IpRange:
          description: The IP range for the Net, in CIDR notation (for example, 10.0.0.0/16).
          type: string
        Tenancy:
          description: The tenancy options for the VMs (`default` if a VM created in a Net can be launched with any tenancy, `dedicated` if it can be launched with dedicated tenancy VMs running on single-tenant hardware).
          type: string
      required:
      - IpRange
      type: object
    CreateNetResponse:
      properties:
        Net:
          $ref: '#/components/schemas/Net'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateNicRequest:
      properties:
        Description:
          description: A description for the NIC.
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        PrivateIps:
          description: "The primary private IP address for the NIC.<br /><br />                        \nThis IP address must be within the IP address range of the Subnet that you specify with the `SubnetId` attribute.<br />\nIf you do not specify this attribute, a random private IP address is selected within the IP address range of the Subnet."
          items:
            $ref: '#/components/schemas/PrivateIpLight'
          type: array
        SecurityGroupIds:
          description: One or more IDs of security groups for the NIC.
          items:
            type: string
          type: array
        SubnetId:
          description: The ID of the Subnet in which you want to create the NIC.
          type: string
      required:
      - SubnetId
      type: object
    CreateNicResponse:
      properties:
        Nic:
          $ref: '#/components/schemas/Nic'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreatePublicIpRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
      type: object
    CreatePublicIpResponse:
      properties:
        PublicIp:
          $ref: '#/components/schemas/PublicIp'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateRouteRequest:
      properties:
        DestinationIpRange:
          description: The IP range used for the destination match, in CIDR notation (for example, 10.0.0.0/24).
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        GatewayId:
          description: The ID of an Internet service or virtual gateway attached to your Net.
          type: string
        NatServiceId:
          description: The ID of a NAT service.
          type: string
        NetPeeringId:
          description: The ID of a Net peering connection.
          type: string
        NicId:
          description: The ID of a NIC.
          type: string
        RouteTableId:
          description: The ID of the route table for which you want to create a route.
          type: string
        VmId:
          description: The ID of a NAT VM in your Net (attached to exactly one NIC).
          type: string
      required:
      - DestinationIpRange
      - RouteTableId
      type: object
    CreateRouteResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        RouteTable:
          $ref: '#/components/schemas/RouteTable'
      type: object
    CreateRouteTableRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NetId:
          description: The ID of the Net for which you want to create a route table.
          type: string
      required:
      - NetId
      type: object
    CreateRouteTableResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        RouteTable:
          $ref: '#/components/schemas/RouteTable'
      type: object
    CreateSecurityGroupRequest:
      properties:
        Description:
          description: A description for the security group, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NetId:
          description: The ID of the Net for the security group.
          type: string
        SecurityGroupName:
          description: '(Public Cloud only) The name of the security group.<br />

            This name must be unique and contain between 1 and 255 ASCII characters. Accented letters are not allowed.'
          type: string
      required:
      - Description
      - SecurityGroupName
      type: object
    CreateSecurityGroupResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        SecurityGroup:
          $ref: '#/components/schemas/SecurityGroup'
      type: object
    CreateSecurityGroupRuleRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Flow:
          description: 'The direction of the flow: `Inbound` or `Outbound`. You can specify `Outbound` for Nets only.'
          type: string
        FromPortRange:
          description: The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
          type: integer
        IpProtocol:
          description: The IP protocol name (`tcp`, `udp`, `icmp`) or protocol number. By default, `-1`, which means all protocols.
          type: string
        IpRange:
          description: The IP range for the security group rule, in CIDR notation (for example, 10.0.0.0/16).
          type: string
        Rules:
          description: Information about the security group rule to create.
          items:
            $ref: '#/components/schemas/SecurityGroupRule'
          type: array
        SecurityGroupAccountIdToLink:
          description: The account ID of the owner of the security group for which you want to create a rule.
          type: string
        SecurityGroupId:
          description: The ID of the security group for which you want to create a rule.
          type: string
        SecurityGroupNameToLink:
          description: The name of the security group for which you want to create a rule.
          type: string
        ToPortRange:
          description: 'The end of the port range for the TCP and UDP protocols, or an ICMP type number. '
          type: integer
      required:
      - SecurityGroupId
      - Flow
      type: object
    CreateSecurityGroupRuleResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        SecurityGroup:
          $ref: '#/components/schemas/SecurityGroup'
      type: object
    CreateSnapshotExportTaskRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        OsuExport:
          $ref: '#/components/schemas/OsuExport'
        SnapshotId:
          description: The ID of the snapshot to export.
          type: string
      required:
      - OsuExport
      - SnapshotId
      type: object
    CreateSnapshotExportTaskResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        SnapshotExportTask:
          $ref: '#/components/schemas/SnapshotExportTask'
      type: object
    CreateSnapshotRequest:
      properties:
        Description:
          description: A description for the snapshot.
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        FileLocation:
          description: The pre-signed URL of the snapshot you want to import from the OSU bucket.
          type: string
        SnapshotSize:
          description: The size of the snapshot created in your account, in gibibytes (GiB). This size must be exactly the same as the source snapshot one. The maximum allowed size is 14,901 GiB.
          type: integer
        SourceRegionName:
          description: The name of the source Region, which must be the same as the Region of your account.
          type: string
        SourceSnapshotId:
          description: The ID of the snapshot you want to copy.
          type: string
        VolumeId:
          description: The ID of the volume you want to create a snapshot of.
          type: string
      type: object
    CreateSnapshotResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Snapshot:
          $ref: '#/components/schemas/Snapshot'
      type: object
    CreateSubnetRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        IpRange:
          description: The IP range in the Subnet, in CIDR notation (for example, 10.0.0.0/16).
          type: string
        NetId:
          description: The ID of the Net for which you want to create a Subnet.
          type: string
        SubregionName:
          description: The name of the Subregion in which you want to create the Subnet.
          type: string
      required:
      - IpRange
      - NetId
      type: object
    CreateSubnetResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Subnet:
          $ref: '#/components/schemas/Subnet'
      type: object
    CreateTagsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        ResourceIds:
          description: One or more resource IDs.
          items:
            type: string
          type: array
        Tags:
          description: One or more tags to add to the specified resources.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      required:
      - ResourceIds
      - Tags
      type: object
    CreateTagsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    CreateVirtualGatewayRequest:
      properties:
        ConnectionType:
          description: The type of VPN connection supported by the virtual gateway (only `ipsec.1` is supported).
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
      required:
      - ConnectionType
      type: object
    CreateVirtualGatewayResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VirtualGateway:
          $ref: '#/components/schemas/VirtualGateway'
      type: object
    CreateVmsRequest:
      properties:
        BlockDeviceMappings:
          description: One or more block device mappings.
          items:
            $ref: '#/components/schemas/BlockDeviceMappingVmCreation'
          type: array
        BootOnCreation:
          description: By default or if `true`, the VM is started on creation. If `false`, the VM is stopped on creation.
          type: boolean
        BsuOptimized:
          description: If `true`, the VM is created with optimized BSU I/O.
          type: boolean
        ClientToken:
          description: A unique identifier which enables you to manage the idempotency.
          type: string
        DeletionProtection:
          description: If `true`, you cannot terminate the VM using Cockpit, the CLI or the API. If `false`, you can.
          type: boolean
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        ImageId:
          description: The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](#readimages) method.
          type: string
        KeypairName:
          description: The name of the keypair.
          type: string
        MaxVmsCount:
          description: The maximum number of VMs you want to create. If all the VMs cannot be created, the largest possible number of VMs above MinVmsCount is created.
          type: integer
        MinVmsCount:
          description: The minimum number of VMs you want to create. If this number of VMs cannot be created, no VMs are created.
          type: integer
        Nics:
          description: One or more NICs. If you specify this parameter, you must define one NIC as the primary network interface of the VM with 0 as its device number.
          items:
            $ref: '#/components/schemas/NicForVmCreation'
          type: array
        Performance:
          default: high
          description: The performance of the VM (`medium` \| `high` \|  `highest`).
          enum:
          - medium
          - high
          - highest
          type: string
        Placement:
          $ref: '#/components/schemas/Placement'
        PrivateIps:
          description: The private IP address(es) of the VM.
          items:
            type: string
          type: array
        SecurityGroupIds:
          description: One or more IDs of security group for the VMs.
          items:
            type: string
          type: array
        SecurityGroups:
          description: One or more names of security groups for the VMs.
          items:
            type: string
          type: array
        SubnetId:
          description: The ID of the Subnet in which you want to create the VM.
          type: string
        UserData:
          description: Data or a script used to add a specific configuration to the VM when creating it. If you are not using a command line tool, this must be Base64-encoded.
          type: string
        VmInitiatedShutdownBehavior:
          description: The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
          type: string
        VmType:
          description: 'The type of VM (`tinav2.c1r2` by default).<br />

            For more information, see [Instance Types](https://wiki.outscale.net/display/EN/Instance+Types).'
          type: string
      required:
      - ImageId
      type: object
    CreateVmsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Vms:
          description: Information about one or more created VMs.
          items:
            $ref: '#/components/schemas/Vm'
          type: array
      type: object
    CreateVolumeRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Iops:
          description: The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000`.
          type: integer
        Size:
          description: The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14,901 GiB.
          type: integer
        SnapshotId:
          description: The ID of the snapshot from which you want to create the volume.
          type: string
        SubregionName:
          description: The Subregion in which you want to create the volume.
          type: string
        VolumeType:
          description: 'The type of volume you want to create (`io1` \| `gp2` \| `standard`). If not specified, a `standard` volume is created.<br />

            For more information about volume types, see [Volume Types and IOPS](https://wiki.outscale.net/display/EN/About+Volumes#AboutVolumes-VolumeTypesVolumeTypesandIOPS).'
          type: string
      required:
      - SubregionName
      type: object
    CreateVolumeResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Volume:
          $ref: '#/components/schemas/Volume'
      type: object
    CreateVpnConnectionRequest:
      properties:
        ClientGatewayId:
          description: The ID of the client gateway.
          type: string
        ConnectionType:
          description: The type of VPN connection (only `ipsec.1` is supported).
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        StaticRoutesOnly:
          description: If `false`, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If `true`, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](#createvpnconnectionroute) and [DeleteVpnConnectionRoute](#deletevpnconnectionroute).
          type: boolean
        VirtualGatewayId:
          description: The ID of the virtual gateway.
          type: string
      required:
      - ClientGatewayId
      - ConnectionType
      - VirtualGatewayId
      type: object
    CreateVpnConnectionResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VpnConnection:
          $ref: '#/components/schemas/VpnConnection'
      type: object
    CreateVpnConnectionRouteRequest:
      properties:
        DestinationIpRange:
          description: The network prefix of the route, in CIDR notation (for example, 10.12.0.0/16).
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        VpnConnectionId:
          description: The ID of the target VPN connection of the static route.
          type: string
      required:
      - DestinationIpRange
      - VpnConnectionId
      type: object
    CreateVpnConnectionRouteResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteClientGatewayRequest:
      properties:
        ClientGatewayId:
          description: The ID of the client gateway you want to delete.
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
      required:
      - ClientGatewayId
      type: object
    DeleteClientGatewayResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteDhcpOptionsRequest:
      properties:
        DhcpOptionsSetId:
          description: The ID of the DHCP options set you want to delete.
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
      required:
      - DhcpOptionsSetId
      type: object
    DeleteDhcpOptionsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteDirectLinkInterfaceRequest:
      properties:
        DirectLinkInterfaceId:
          description: The ID of the DirectLink interface you want to delete.
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
      required:
      - DirectLinkInterfaceId
      type: object
    DeleteDirectLinkInterfaceResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteDirectLinkRequest:
      properties:
        DirectLinkId:
          description: The ID of the DirectLink you want to delete.
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
      required:
      - DirectLinkId
      type: object
    DeleteDirectLinkResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteExportTaskRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        ExportTaskId:
          description: The ID of the export task to delete.
          type: string
      required:
      - ExportTaskId
      type: object
    DeleteExportTaskResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteFlexibleGpuRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        FlexibleGpuId:
          description: The ID of the fGPU you want to delete.
          type: string
      required:
      - FlexibleGpuId
      type: object
    DeleteFlexibleGpuResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteImageRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        ImageId:
          description: The ID of the OMI you want to delete.
          type: string
      required:
      - ImageId
      type: object
    DeleteImageResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteInternetServiceRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        InternetServiceId:
          description: The ID of the Internet service you want to delete.
          type: string
      required:
      - InternetServiceId
      type: object
    DeleteInternetServiceResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteKeypairRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        KeypairName:
          description: The name of the keypair you want to delete.
          type: string
      required:
      - KeypairName
      type: object
    DeleteKeypairResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteLoadBalancerListenersRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerName:
          description: The name of the load balancer for which you want to delete listeners.
          type: string
        LoadBalancerPorts:
          description: The port number(s) of the listener(s) you want to delete.
          items:
            type: integer
          type: array
      required:
      - LoadBalancerName
      - LoadBalancerPorts
      type: object
    DeleteLoadBalancerListenersResponse:
      properties:
        LoadBalancer:
          $ref: '#/components/schemas/LoadBalancer'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteLoadBalancerPolicyRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerName:
          description: The name of the load balancer for which you want to delete a policy.
          type: string
        PolicyName:
          description: The name of the policy you want to delete.
          type: string
      required:
      - LoadBalancerName
      - PolicyName
      type: object
    DeleteLoadBalancerPolicyResponse:
      properties:
        LoadBalancer:
          $ref: '#/components/schemas/LoadBalancer'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteLoadBalancerRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerName:
          description: The name of the load balancer you want to delete.
          type: string
      required:
      - LoadBalancerName
      type: object
    DeleteLoadBalancerResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteNatServiceRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NatServiceId:
          description: The ID of the NAT service you want to delete.
          type: string
      required:
      - NatServiceId
      type: object
    DeleteNatServiceResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteNetAccessPointRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NetAccessPointId:
          description: The ID of the Net access point.
          type: string
      required:
      - NetAccessPointId
      type: object
    DeleteNetAccessPointResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteNetPeeringRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NetPeeringId:
          description: The ID of the Net peering connection you want to delete.
          type: string
      required:
      - NetPeeringId
      type: object
    DeleteNetPeeringResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteNetRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NetId:
          description: The ID of the Net you want to delete.
          type: string
      required:
      - NetId
      type: object
    DeleteNetResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteNicRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NicId:
          description: The ID of the NIC you want to delete.
          type: string
      required:
      - NicId
      type: object
    DeleteNicResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeletePublicIpRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        PublicIp:
          description: The EIP. In the public Cloud, this parameter is required.
          type: string
        PublicIpId:
          description: The ID representing the association of the EIP with the VM or the NIC. In a Net, this parameter is required.
          type: string
      type: object
    DeletePublicIpResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteRouteRequest:
      properties:
        DestinationIpRange:
          description: The exact IP range for the route.
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        RouteTableId:
          description: The ID of the route table from which you want to delete a route.
          type: string
      required:
      - RouteTableId
      - DestinationIpRange
      type: object
    DeleteRouteResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        RouteTable:
          $ref: '#/components/schemas/RouteTable'
      type: object
    DeleteRouteTableRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        RouteTableId:
          description: The ID of the route table you want to delete.
          type: string
      required:
      - RouteTableId
      type: object
    DeleteRouteTableResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteSecurityGroupRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        SecurityGroupId:
          description: The ID of the security group you want to delete.
          type: string
        SecurityGroupName:
          description: (Public Cloud only) The name of the security group.
          type: string
      type: object
    DeleteSecurityGroupResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteSecurityGroupRuleRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Flow:
          description: 'The direction of the flow: `Inbound` or `Outbound`. You can specify `Outbound` for Nets only.'
          type: string
        FromPortRange:
          description: The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
          type: integer
        IpProtocol:
          description: The IP protocol name (`tcp`, `udp`, `icmp`) or protocol number. By default, `-1`, which means all protocols.
          type: string
        IpRange:
          description: The IP range for the security group rule, in CIDR notation (for example, 10.0.0.0/16).
          type: string
        Rules:
          description: The rule(s) you want to delete from the security group.
          items:
            $ref: '#/components/schemas/SecurityGroupRule'
          type: array
        SecurityGroupAccountIdToUnlink:
          description: The account ID of the owner of the security group you want to delete a rule from.
          type: string
        SecurityGroupId:
          description: The ID of the security group you want to delete a rule from.
          type: string
        SecurityGroupNameToUnlink:
          description: The name of the security group you want to delete a rule from.
          type: string
        ToPortRange:
          description: The end of the port range for the TCP and UDP protocols, or an ICMP type number.
          type: integer
      required:
      - SecurityGroupId
      - Flow
      type: object
    DeleteSecurityGroupRuleResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        SecurityGroup:
          $ref: '#/components/schemas/SecurityGroup'
      type: object
    DeleteSnapshotRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        SnapshotId:
          description: The ID of the snapshot you want to delete.
          type: string
      required:
      - SnapshotId
      type: object
    DeleteSnapshotResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteSubnetRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        SubnetId:
          description: The ID of the Subnet you want to delete.
          type: string
      required:
      - SubnetId
      type: object
    DeleteSubnetResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteTagsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        ResourceIds:
          description: One or more resource IDs.
          items:
            type: string
          type: array
        Tags:
          description: One or more tags to delete (if you set a tag value, only the tags matching exactly this value are deleted).
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      required:
      - ResourceIds
      - Tags
      type: object
    DeleteTagsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteVirtualGatewayRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        VirtualGatewayId:
          description: The ID of the virtual gateway you want to delete.
          type: string
      required:
      - VirtualGatewayId
      type: object
    DeleteVirtualGatewayResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteVmsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        VmIds:
          description: One or more IDs of VMs.
          items:
            type: string
          type: array
      required:
      - VmIds
      type: object
    DeleteVmsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Vms:
          description: Information about one or more terminated VMs.
          items:
            $ref: '#/components/schemas/VmState'
          type: array
      type: object
    DeleteVolumeRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        VolumeId:
          description: The ID of the volume you want to delete.
          type: string
      required:
      - VolumeId
      type: object
    DeleteVolumeResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteVpnConnectionRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        VpnConnectionId:
          description: The ID of the VPN connection you want to delete.
          type: string
      required:
      - VpnConnectionId
      type: object
    DeleteVpnConnectionResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeleteVpnConnectionRouteRequest:
      properties:
        DestinationIpRange:
          description: The network prefix of the route to delete, in CIDR notation (for example, 10.12.0.0/16).
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        VpnConnectionId:
          description: The ID of the target VPN connection of the static route to delete.
          type: string
      required:
      - DestinationIpRange
      - VpnConnectionId
      type: object
    DeleteVpnConnectionRouteResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DeregisterVmsInLoadBalancerRequest:
      properties:
        BackendVmIds:
          description: One or more IDs of back-end VMs.
          items:
            type: string
          type: array
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerName:
          description: The name of the load balancer.
          type: string
      required:
      - BackendVmIds
      - LoadBalancerName
      type: object
    DeregisterVmsInLoadBalancerResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    DhcpOptionsSet:
      description: Information about the DHCP options set.
      properties:
        Default:
          description: If `true`, the DHCP options set is a default one. If `false`, it is not.
          type: boolean
        DhcpOptionsName:
          description: The name of the DHCP options set.
          type: string
        DhcpOptionsSetId:
          description: The ID of the DHCP options set.
          type: string
        DomainName:
          description: The domain name.
          type: string
        DomainNameServers:
          description: One or more IP addresses for the domain name servers.
          items:
            type: string
          type: array
        NtpServers:
          description: One or more IP addresses for the NTP servers.
          items:
            type: string
          type: array
        Tags:
          description: One or more tags associated with the DHCP options set.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    DirectLink:
      description: Information about the DirectLink.
      properties:
        AccountId:
          description: The account ID of the owner of the DirectLink.
          type: string
        Bandwidth:
          description: The physical link bandwidth (either 1 GiB/s or 10 GiB/s).
          type: string
        DirectLinkId:
          description: The ID of the DirectLink (for example, dcx-xxxxxxxx).
          type: string
        DirectLinkName:
          description: The name of the DirectLink.
          type: string
        Location:
          description: The datacenter where the DirectLink is located.
          type: string
        RegionName:
          description: The Region in which the DirectLink has been created.
          type: string
        State:
          description: 'The state of the DirectLink.<br />

            * `requested`: The DirectLink is requested but the request has not been validated yet.<br />

            * `pending`: The DirectLink request has been validated. It remains in the `pending` state until you establish the physical link.<br />

            * `available`: The physical link is established and the connection is ready to use.<br />

            * `deleting`: The deletion process is in progress.<br />

            * `deleted`: The DirectLink is deleted.'
          type: string
      type: object
    DirectLinkInterface:
      description: Information about the DirectLink interface.
      properties:
        BgpAsn:
          description: The BGP (Border Gateway Protocol) ASN (Autonomous System Number) on the customer's side of the DirectLink interface.
          type: integer
        BgpKey:
          description: The BGP authentication key.
          type: string
        ClientPrivateIp:
          description: The IP address on the customer's side of the DirectLink interface.
          type: string
        DirectLinkInterfaceName:
          description: The name of the DirectLink interface.
          type: string
        OutscalePrivateIp:
          description: The IP address on 3DS OUTSCALE's side of the DirectLink interface.
          type: string
        VirtualGatewayId:
          description: The ID of the target virtual gateway.
          type: string
        Vlan:
          description: The VLAN number associated with the DirectLink interface.
          type: integer
      required:
      - BgpAsn
      - DirectLinkInterfaceName
      - VirtualGatewayId
      - Vlan
      type: object
    DirectLinkInterfaces:
      description: Information about the DirectLink interfaces.
      properties:
        AccountId:
          description: The account ID of the owner of the DirectLink interface.
          type: string
        BgpAsn:
          description: The BGP (Border Gateway Protocol) ASN (Autonomous System Number) on the customer's side of the DirectLink interface.
          type: integer
        BgpKey:
          description: The BGP authentication key.
          type: string
        ClientPrivateIp:
          description: The IP address on the customer's side of the DirectLink interface.
          type: string
        DirectLinkId:
          description: The ID of the DirectLink.
          type: string
        DirectLinkInterfaceId:
          description: The ID of the DirectLink interface.
          type: string
        DirectLinkInterfaceName:
          description: The name of the DirectLink interface.
          type: string
        InterfaceType:
          description: The type of the DirectLink interface (always `private`).
          type: string
        Location:
          description: The datacenter where the DirectLink interface is located.
          type: string
        OutscalePrivateIp:
          description: The IP address on 3DS OUTSCALE's side of the DirectLink interface.
          type: string
        State:
          description: The state of the DirectLink interface (`pending` \| `available` \| `deleting` \| `deleted` \| `confirming` \| `rejected` \| `expired`).
          type: string
        VirtualGatewayId:
          description: The ID of the target virtual gateway.
          type: string
        Vlan:
          description: The VLAN number associated with the DirectLink interface.
          type: integer
      type: object
    ErrorResponse:
      properties:
        Errors:
          description: One or more errors.
          items:
            $ref: '#/components/schemas/Errors'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
    Errors:
      description: Information about the errors.
      properties:
        Code:
          description: The code of the error.
          type: string
        Details:
          description: The details of the error.
          type: string
        Type:
          description: The type of the error.
          type: string
      type: object
    FiltersApiLog:
      description: One or more filters.
      properties:
        QueryAccessKeys:
          description: One or more API keys used for the query.
          items:
            type: string
          type: array
        QueryApiNames:
          description: The name of one or more API services used for the query.
          items:
            type: string
          type: array
        QueryCallNames:
          description: The name of one or more calls.
          items:
            type: string
          type: array
        QueryDateAfter:
          description: The logs of the queries made after the date and time you specify (in ISO 8601 base or extended format).
          format: date
          type: string
        QueryDateBefore:
          description: The logs of the queries made before the date and time you specify (in ISO 8601 base or extended format).
          format: date
          type: string
        QueryIpAddresses:
          description: One or more IP addresses used for the query.
          items:
            type: string
          type: array
        QueryUserAgents:
          description: One or more user agents used for the HTTP request.
          items:
            type: string
          type: array
        RequestIds:
          description: One or more request IDs.
          items:
            type: string
          type: array
        ResponseStatusCodes:
          description: One or more HTTP codes provided by the responses.
          items:
            type: integer
          type: array
      type: object
    FiltersClientGateway:
      description: One or more filters.
      properties:
        BgpAsns:
          description: The Border Gateway Protocol (BGP) Autonomous System Numbers (ASNs) of the connections.
          items:
            type: integer
          type: array
        ClientGatewayIds:
          description: The IDs of the client gateways.
          items:
            type: string
          type: array
        ConnectionTypes:
          description: The types of communication tunnels used by the client gateways (only `ipsec.1` is supported).
          items:
            type: string
          type: array
        PublicIps:
          description: The public IPv4 addresses of the client gateways.
          items:
            type: string
          type: array
        States:
          description: The states of the client gateways (`pending` \| `available` \| `deleting` \| `deleted`).
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the client gateways.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the client gateways.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the client gateways, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.'
          items:
            type: string
          type: array
      type: object
    FiltersDhcpOptions:
      description: One or more filters.
      properties:
        Default:
          description: 'If `true`, lists all default DHCP options set. If `false`, lists all non-default DHCP options set. '
          type: boolean
        DhcpOptionsSetIds:
          description: The IDs of the DHCP options sets.
          items:
            type: string
          type: array
        DomainNameServers:
          description: The domain name servers used for the DHCP options sets.
          items:
            type: string
          type: array
        DomainNames:
          description: The domain names used for the DHCP options sets.
          items:
            type: string
          type: array
        NtpServers:
          description: The Network Time Protocol (NTP) servers used for the DHCP options sets.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the DHCP options sets.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the DHCP options sets.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the DHCP options sets, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.'
          items:
            type: string
          type: array
      type: object
    FiltersDirectLink:
      description: One or more filters.
      properties:
        DirectLinkIds:
          description: The IDs of the DirectLinks.
          items:
            type: string
          type: array
      type: object
    FiltersDirectLinkInterface:
      description: One or more filters.
      properties:
        DirectLinkIds:
          description: The IDs of the DirectLinks.
          items:
            type: string
          type: array
        DirectLinkInterfaceIds:
          description: The IDs of the DirectLink interfaces.
          items:
            type: string
          type: array
      type: object
    FiltersExportTask:
      description: One or more filters.
      properties:
        TaskIds:
          description: The IDs of the export tasks.
          items:
            type: string
          type: array
      type: object
    FiltersFlexibleGpu:
      description: One or more filters.
      properties:
        DeleteOnVmDeletion:
          description: Indicates whether the fGPU is deleted when terminating the VM.
          type: boolean
        FlexibleGpuIds:
          description: One or more IDs of fGPUs.
          items:
            type: string
          type: array
        ModelNames:
          description: One or more models of fGPUs. For more information, see [About Flexible GPUs](https://wiki.outscale.net/display/EN/About+Flexible+GPUs).
          items:
            type: string
          type: array
        States:
          description: The states of the fGPUs (`allocated` \| `attaching` \| `attached` \| `detaching`).
          items:
            type: string
          type: array
        SubregionNames:
          description: The Subregions where the fGPUs are located.
          items:
            type: string
          type: array
        VmIds:
          description: One or more IDs of VMs.
          items:
            type: string
          type: array
      type: object
    FiltersImage:
      description: One or more filters.
      properties:
        AccountAliases:
          description: The account aliases of the owners of the OMIs.
          items:
            type: string
          type: array
        AccountIds:
          description: The account IDs of the owners of the OMIs. By default, all the OMIs for which you have launch permissions are described.
          items:
            type: string
          type: array
        Architectures:
          description: The architectures of the OMIs (`i386` \| `x86_64`).
          items:
            type: string
          type: array
        BlockDeviceMappingDeleteOnVmDeletion:
          description: Indicates whether the block device mapping is deleted when terminating the VM.
          type: boolean
        BlockDeviceMappingDeviceNames:
          description: The device names for the volumes.
          items:
            type: string
          type: array
        BlockDeviceMappingSnapshotIds:
          description: The IDs of the snapshots used to create the volumes.
          items:
            type: string
          type: array
        BlockDeviceMappingVolumeSizes:
          description: The sizes of the volumes, in gibibytes (GiB).
          items:
            type: integer
          type: array
        BlockDeviceMappingVolumeTypes:
          description: The types of volumes (`standard` \| `gp2` \| `io1`).
          items:
            type: string
          type: array
        Descriptions:
          description: The descriptions of the OMIs, provided when they were created.
          items:
            type: string
          type: array
        FileLocations:
          description: The locations where the OMI files are stored on Object Storage Unit (OSU).
          items:
            type: string
          type: array
        ImageIds:
          description: The IDs of the OMIs.
          items:
            type: string
          type: array
        ImageNames:
          description: The names of the OMIs, provided when they were created.
          items:
            type: string
          type: array
        PermissionsToLaunchAccountIds:
          description: The account IDs of the users who have launch permissions for the OMIs.
          items:
            type: string
          type: array
        PermissionsToLaunchGlobalPermission:
          description: If `true`, lists all public OMIs. If `false`, lists all private OMIs.
          type: boolean
        RootDeviceNames:
          description: The device names of the root devices (for example, `/dev/sda1`).
          items:
            type: string
          type: array
        RootDeviceTypes:
          description: The types of root device used by the OMIs (always `ebs`).
          items:
            type: string
          type: array
        States:
          description: The states of the OMIs.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the OMIs.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the OMIs.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the OMIs, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.'
          items:
            type: string
          type: array
        VirtualizationTypes:
          description: The virtualization types (always `hvm`).
          items:
            type: string
          type: array
      type: object
    FiltersInternetService:
      description: One or more filters.
      properties:
        InternetServiceIds:
          description: The IDs of the Internet services.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the Internet services.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the Internet services.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the Internet services, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.'
          items:
            type: string
          type: array
      type: object
    FiltersKeypair:
      description: One or more filters.
      properties:
        KeypairFingerprints:
          description: The fingerprints of the keypairs.
          items:
            type: string
          type: array
        KeypairNames:
          description: The names of the keypairs.
          items:
            type: string
          type: array
      type: object
    FiltersLoadBalancer:
      description: One or more filters.
      properties:
        LoadBalancerNames:
          description: The names of the load balancers.
          items:
            type: string
          type: array
      type: object
    FiltersNatService:
      description: One or more filters.
      properties:
        NatServiceIds:
          description: The IDs of the NAT services.
          items:
            type: string
          type: array
        NetIds:
          description: The IDs of the Nets in which the NAT services are.
          items:
            type: string
          type: array
        States:
          description: The states of the NAT services (`pending` \| `available` \| `deleting` \| `deleted`).
          items:
            type: string
          type: array
        SubnetIds:
          description: The IDs of the Subnets in which the NAT services are.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the NAT services.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the NAT services.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the NAT services, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.'
          items:
            type: string
          type: array
      type: object
    FiltersNet:
      description: One or more filters.
      properties:
        DhcpOptionsSetIds:
          description: The IDs of the DHCP options sets.
          items:
            type: string
          type: array
        IpRanges:
          description: The IP ranges for the Nets, in CIDR notation (for example, 10.0.0.0/16).
          items:
            type: string
          type: array
        NetIds:
          description: The IDs of the Nets.
          items:
            type: string
          type: array
        States:
          description: The states of the Nets (`pending` \| `available`).
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the Nets.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the Nets.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the Nets, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.'
          items:
            type: string
          type: array
      type: object
    FiltersNetAccessPoint:
      description: One or more filters.
      properties:
        NetAccessPointIds:
          description: The IDs of the Net access points.
          items:
            type: string
          type: array
        NetIds:
          description: The IDs of the Nets.
          items:
            type: string
          type: array
        ServiceNames:
          description: The names of the prefix lists corresponding to the services. For more information, see [DescribePrefixLists](#describeprefixlists)
          items:
            type: string
          type: array
        States:
          description: The states of the Net access points (`pending` \| `available` \| `deleting` \| `deleted`).
          items:
            type: string
          type: array
      type: object
    FiltersNetPeering:
      description: One or more filters.
      properties:
        AccepterNetAccountIds:
          description: The account IDs of the owners of the peer Nets.
          items:
            type: string
          type: array
        AccepterNetIpRanges:
          description: The IP ranges of the peer Nets, in CIDR notation (for example, 10.0.0.0/24).
          items:
            type: string
          type: array
        AccepterNetNetIds:
          description: The IDs of the peer Nets.
          items:
            type: string
          type: array
        NetPeeringIds:
          description: The IDs of the Net peering connections.
          items:
            type: string
          type: array
        SourceNetAccountIds:
          description: The account IDs of the owners of the peer Nets.
          items:
            type: string
          type: array
        SourceNetIpRanges:
          description: The IP ranges of the peer Nets.
          items:
            type: string
          type: array
        SourceNetNetIds:
          description: The IDs of the peer Nets.
          items:
            type: string
          type: array
        StateMessages:
          description: Additional information about the states of the Net peering connections.
          items:
            type: string
          type: array
        StateNames:
          description: The states of the Net peering connections (`pending-acceptance` \| `active` \| `rejected` \| `failed` \| `expired` \| `deleted`).
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the Net peering connections.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the Net peering connections.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the Net peering connections, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.'
          items:
            type: string
          type: array
      type: object
    FiltersNic:
      description: One or more filters.
      properties:
        AccountIds:
          description: The account IDs of the owners of the NICs.
          items:
            type: string
          type: array
        LinkNicSortNumbers:
          description: The device numbers the NICs are attached to.
          items:
            type: integer
          type: array
        LinkNicVmIds:
          description: The IDs of the VMs the NICs are attached to.
          items:
            type: string
          type: array
        NicIds:
          description: The IDs of the NICs.
          items:
            type: string
          type: array
        PrivateIpsPrivateIps:
          description: The private IP addresses of the NICs.
          items:
            type: string
          type: array
        SubnetIds:
          description: The IDs of the Subnets for the NICs.
          items:
            type: string
          type: array
      type: object
    FiltersProductType:
      description: One or more filters.
      properties:
        ProductTypeIds:
          description: The IDs of the product types.
          items:
            type: string
          type: array
      type: object
    FiltersPublicIp:
      description: One or more filters.
      properties:
        LinkPublicIpIds:
          description: The IDs representing the associations of EIPs with VMs or NICs.
          items:
            type: string
          type: array
        NicAccountIds:
          description: The account IDs of the owners of the NICs.
          items:
            type: string
          type: array
        NicIds:
          description: The IDs of the NICs.
          items:
            type: string
          type: array
        Placements:
          description: Whether the EIPs are for use in the public Cloud or in a Net.
          items:
            type: string
          type: array
        PrivateIps:
          description: The private IP addresses associated with the EIPs.
          items:
            type: string
          type: array
        PublicIpIds:
          description: The IDs of the External IP addresses (EIPs).
          items:
            type: string
          type: array
        PublicIps:
          description: The External IP addresses (EIPs).
          items:
            type: string
          type: array
        VmIds:
          description: The IDs of the VMs.
          items:
            type: string
          type: array
      type: object
    FiltersQuota:
      description: One or more filters.
      properties:
        Collections:
          description: The group names of the quotas.
          items:
            type: string
          type: array
        QuotaNames:
          description: The names of the quotas.
          items:
            type: string
          type: array
        QuotaTypes:
          description: The resource IDs if these are resource-specific quotas, `global` if they are not.
          items:
            type: string
          type: array
        ShortDescriptions:
          description: The description of the quotas.
          items:
            type: string
          type: array
      type: object
    FiltersRouteTable:
      description: One or more filters.
      properties:
        LinkRouteTableLinkRouteTableIds:
          description: The IDs of the associations between the route tables and the Subnets.
          items:
            type: string
          type: array
        LinkSubnetIds:
          description: The IDs of the Subnets involved in the associations.
          items:
            type: string
          type: array
        NetIds:
          description: The IDs of the Nets for the route tables.
          items:
            type: string
          type: array
        RouteCreationMethods:
          description: The methods used to create a route.
          items:
            type: string
          type: array
        RouteDestinationIpRanges:
          description: The IP ranges specified in routes in the tables.
          items:
            type: string
          type: array
        RouteGatewayIds:
          description: The IDs of the gateways specified in routes in the tables.
          items:
            type: string
          type: array
        RouteNatServiceIds:
          description: The IDs of the NAT services specified in routes in the tables.
          items:
            type: string
          type: array
        RouteNetPeeringIds:
          description: The IDs of the Net peering connections specified in routes in the tables.
          items:
            type: string
          type: array
        RouteStates:
          description: The states of routes in the route tables (`active` \| `blackhole`). The `blackhole` state indicates that the target of the route is not available.
          items:
            type: string
          type: array
        RouteTableIds:
          description: The IDs of the route tables.
          items:
            type: string
          type: array
        RouteVmIds:
          description: The IDs of the VMs specified in routes in the tables.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the route tables.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the route tables.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the route tables, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.'
          items:
            type: string
          type: array
      type: object
    FiltersSecurityGroup:
      description: One or more filters.
      properties:
        AccountIds:
          description: The account IDs of the owners of the security groups.
          items:
            type: string
          type: array
        SecurityGroupIds:
          description: The IDs of the security groups.
          items:
            type: string
          type: array
        SecurityGroupNames:
          description: The names of the security groups.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the security groups.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the security groups.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the security groups, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.'
          items:
            type: string
          type: array
      type: object
    FiltersService:
      description: One or more filters.
      properties:
        ServiceIds:
          description: The IDs of the services.
          items:
            type: string
          type: array
        ServiceNames:
          description: The names of the prefix lists, which identify the 3DS OUTSCALE services they are associated with.
          items:
            type: string
          type: array
      type: object
    FiltersSnapshot:
      description: One or more filters.
      properties:
        AccountAliases:
          description: The account aliases of the owners of the snapshots.
          items:
            type: string
          type: array
        AccountIds:
          description: The account IDs of the owners of the snapshots.
          items:
            type: string
          type: array
        Descriptions:
          description: The descriptions of the snapshots.
          items:
            type: string
          type: array
        PermissionsToCreateVolumeAccountIds:
          description: The account IDs of one or more users who have permissions to create volumes.
          items:
            type: string
          type: array
        PermissionsToCreateVolumeGlobalPermission:
          description: If `true`, lists all public volumes. If `false`, lists all private volumes.
          type: boolean
        Progresses:
          description: The progresses of the snapshots, as a percentage.
          items:
            type: integer
          type: array
        SnapshotIds:
          description: The IDs of the snapshots.
          items:
            type: string
          type: array
        States:
          description: The states of the snapshots (`in-queue` \| `pending` \| `completed`).
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the snapshots.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the snapshots.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the snapshots, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.'
          items:
            type: string
          type: array
        VolumeIds:
          description: The IDs of the volumes used to create the snapshots.
          items:
            type: string
          type: array
        VolumeSizes:
          description: The sizes of the volumes used to create the snapshots, in gibibytes (GiB).
          items:
            type: integer
          type: array
      type: object
    FiltersSubnet:
      description: One or more filters.
      properties:
        AvailableIpsCounts:
          description: The number of available IPs.
          items:
            type: integer
          type: array
        IpRanges:
          description: The IP ranges in the Subnets, in CIDR notation (for example, 10.0.0.0/16).
          items:
            type: string
          type: array
        NetIds:
          description: The IDs of the Nets in which the Subnets are.
          items:
            type: string
          type: array
        States:
          description: The states of the Subnets (`pending` \| `available`).
          items:
            type: string
          type: array
        SubnetIds:
          description: The IDs of the Subnets.
          items:
            type: string
          type: array
        SubregionNames:
          description: The names of the Subregions in which the Subnets are located.
          items:
            type: string
          type: array
      type: object
    FiltersSubregion:
      description: One or more filters.
      properties:
        SubregionNames:
          description: The names of the Subregions.
          items:
            type: string
          type: array
      type: object
    FiltersTag:
      description: One or more filters.
      properties:
        Keys:
          description: The keys of the tags that are assigned to the resources. You can use this filter alongside the `Values` filter. In that case, you filter the resources corresponding to each tag, regardless of the other filter.
          items:
            type: string
          type: array
        ResourceIds:
          description: The IDs of the resources with which the tags are associated.
          items:
            type: string
          type: array
        ResourceTypes:
          description: The resource type (`instance` \| `image` \| `volume` \| `snapshot` \| `public-ip` \| `security-group` \| `route-table` \| `network-interface` \| `vpc` \| `subnet` \| `network-link` \| `vpc-endpoint` \| `nat-gateway` \| `internet-gateway` \| `customer-gateway` \| `vpn-gateway` \| `vpn-connection` \| `dhcp-options` \| `task`).
          items:
            type: string
          type: array
        Values:
          description: The values of the tags that are assigned to the resources. You can use this filter alongside the `TagKeys` filter. In that case, you filter the resources corresponding to each tag, regardless of the other filter.
          items:
            type: string
          type: array
      type: object
    FiltersVirtualGateway:
      description: One or more filters.
      properties:
        ConnectionTypes:
          description: The types of the virtual gateways (only `ipsec.1` is supported).
          items:
            type: string
          type: array
        LinkNetIds:
          description: The IDs of the Nets the virtual gateways are attached to.
          items:
            type: string
          type: array
        LinkStates:
          description: The current states of the attachments between the virtual gateways and the Nets (`attaching` \| `attached` \| `detaching` \| `detached`).
          items:
            type: string
          type: array
        States:
          description: The states of the virtual gateways (`pending` \| `available` \| `deleting` \| `deleted`).
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the virtual gateways.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the virtual gateways.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the virtual gateways, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.'
          items:
            type: string
          type: array
        VirtualGatewayIds:
          description: The IDs of the virtual gateways.
          items:
            type: string
          type: array
      type: object
    FiltersVm:
      description: One or more filters.
      properties:
        TagKeys:
          description: The keys of the tags associated with the VMs.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the VMs.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the VMs, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.'
          items:
            type: string
          type: array
        VmIds:
          description: One or more IDs of VMs.
          items:
            type: string
          type: array
      type: object
    FiltersVmType:
      description: One or more filters.
      properties:
        BsuOptimized:
          description: Indicates whether the VM is optimized for BSU I/O.
          type: boolean
        MemorySizes:
          description: The amounts of memory, in bytes.
          items:
            type: integer
          type: array
        VcoreCounts:
          description: The numbers of vCores.
          items:
            type: integer
          type: array
        VmTypeNames:
          description: The names of the VM types. For more information, see [Instance Types](https://wiki.outscale.net/display/EN/Instance+Types).
          items:
            type: string
          type: array
        VolumeCounts:
          description: The maximum number of ephemeral storage disks.
          items:
            type: integer
          type: array
        VolumeSizes:
          description: The size of one ephemeral storage disk, in gibibytes (GiB).
          items:
            type: integer
          type: array
      type: object
    FiltersVmsState:
      description: One or more filters.
      properties:
        SubregionNames:
          description: The names of the Subregions of the VMs.
          items:
            type: string
          type: array
        VmIds:
          description: One or more IDs of VMs.
          items:
            type: string
          type: array
        VmStates:
          description: The state(s) of the VMs (`pending` \| `running` \| `shutting-down` \| `terminated` \| `stopping` \| `stopped`).
          items:
            type: string
          type: array
      type: object
    FiltersVolume:
      description: One or more filters.
      properties:
        CreationDates:
          description: The dates and times at which the volumes were created.
          items:
            format: date
            type: string
          type: array
        LinkVolumeDeleteOnVmDeletion:
          description: Indicates whether the volumes are deleted when terminating the VMs.
          type: boolean
        LinkVolumeDeviceNames:
          description: The VM device names.
          items:
            type: string
          type: array
        LinkVolumeLinkDates:
          description: The dates and times at which the volumes were created.
          items:
            format: date
            type: string
          type: array
        LinkVolumeLinkStates:
          description: The attachment states of the volumes (`attaching` \| `detaching` \| `attached` \| `detached`).
          items:
            type: string
          type: array
        LinkVolumeVmIds:
          description: One or more IDs of VMs.
          items:
            type: string
          type: array
        SnapshotIds:
          description: The snapshots from which the volumes were created.
          items:
            type: string
          type: array
        SubregionNames:
          description: The names of the Subregions in which the volumes were created.
          items:
            type: string
          type: array
        TagKeys:
          description: The keys of the tags associated with the volumes.
          items:
            type: string
          type: array
        TagValues:
          description: The values of the tags associated with the volumes.
          items:
            type: string
          type: array
        Tags:
          description: 'The key/value combination of the tags associated with the volumes, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.'
          items:
            type: string
          type: array
        VolumeIds:
          description: The IDs of the volumes.
          items:
            type: string
          type: array
        VolumeSizes:
          description: The sizes of the volumes, in gibibytes (GiB).
          items:
            type: integer
          type: array
        VolumeStates:
          description: The states of the volumes (`creating` \| `available` \| `in-use` \| `deleting` \| `error`).
          items:
            type: string
          type: array
        VolumeTypes:
          description: The types of the volumes (`standard` \| `gp2` \| `io1`).
          items:
            type: string
          type: array
      type: object
    FiltersVpnConnection:
      description: One or more filters.
      properties:
        BgpAsns:
          description: The Border Gateway Protocol (BGP) Autonomous System Numbers (ASNs) of the connections.
          items:
            type: integer
          type: array
        ClientGatewayIds:
          description: The IDs of the client gateways.
          items:
            type: string
          type: array
        ConnectionTypes:
          description: The types of the VPN connections (only `ipsec.1` is supported).
          items:
            type: string
          type: array
        RouteDestinationIpRanges:
          description: The destination IP ranges.
          items:
            type: string
          type: array
        States:
          description: The states of the VPN connections (`pending` \| `available` \| `deleting` \| `deleted`).
          items:
            type: string
          type: array
        StaticRoutesOnly:
          description: If `false`, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If `true`, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](#createvpnconnectionroute) and [DeleteVpnConnectionRoute](#deletevpnconnectionroute).
          type: boolean
        VirtualGatewayIds:
          description: The IDs of the virtual gateways.
          items:
            type: string
          type: array
        VpnConnectionIds:
          description: The IDs of the VPN connections.
          items:
            type: string
          type: array
      type: object
    FlexibleGpu:
      description: Information about the flexible GPU (fGPU).
      properties:
        DeleteOnVmDeletion:
          description: If `true`, the fGPU is deleted when the VM is terminated.
          type: boolean
        FlexibleGpuId:
          description: The ID of the fGPU.
          type: string
        ModelName:
          description: The model of fGPU. For more information, see [About Flexible GPUs](https://wiki.outscale.net/display/EN/About+Flexible+GPUs).
          type: string
        State:
          description: The state of the fGPU (`allocated` \| `attaching` \| `attached` \| `detaching`).
          type: string
        SubregionName:
          description: The Subregion where the fGPU is located.
          type: string
        VmId:
          description: The ID of the VM the fGPU is attached to, if any.
          type: string
      type: object
    HealthCheck:
      description: Information about the health check configuration.
      properties:
        CheckInterval:
          description: The number of seconds between two pings (between `5` and `600` both included).
          type: integer
        HealthyThreshold:
          description: The number of consecutive successful pings before considering the VM as healthy (between `2` and `10` both included).
          type: integer
        Path:
          description: The path for HTTP or HTTPS requests.
          type: string
        Port:
          description: The port number (between `1` and `65535`, both included).
          type: integer
        Protocol:
          description: The protocol for the URL of the VM (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`\| `UDP`).
          type: string
        Timeout:
          description: The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
          type: integer
        UnhealthyThreshold:
          description: The number of consecutive failed pings before considering the VM as unhealthy (between `2` and `10` both included).
          type: integer
      required:
      - CheckInterval
      - HealthyThreshold
      - Path
      - Port
      - Protocol
      - Timeout
      - UnhealthyThreshold
      type: object
    Image:
      description: Information about the OMI.
      properties:
        AccountAlias:
          description: The account alias of the owner of the OMI.
          type: string
        AccountId:
          description: The account ID of the owner of the OMI.
          type: string
        Architecture:
          description: The architecture of the OMI (by default, `i386`).
          type: string
        BlockDeviceMappings:
          description: One or more block device mappings.
          items:
            $ref: '#/components/schemas/BlockDeviceMappingImage'
          type: array
        CreationDate:
          description: The date and time at which the OMI was created.
          format: date
          type: string
        Description:
          description: The description of the OMI.
          type: string
        FileLocation:
          description: The location where the OMI file is stored on Object Storage Unit (OSU).
          type: string
        ImageId:
          description: The ID of the OMI.
          type: string
        ImageName:
          description: The name of the OMI.
          type: string
        ImageType:
          description: The type of the OMI.
          type: string
        PermissionsToLaunch:
          $ref: '#/components/schemas/PermissionsOnResource'
        ProductCodes:
          description: 'The product code associated with the OMI (`0001` Linux/Unix \| `0002` Windows \| `0004` Linux/Oracle \| `0005` Windows 10). '
          items:
            type: string
          type: array
        RootDeviceName:
          description: The name of the root device.
          type: string
        RootDeviceType:
          description: The type of root device used by the OMI (always `bsu`).
          type: string
        State:
          description: The state of the OMI.
          type: string
        StateComment:
          $ref: '#/components/schemas/StateComment'
        Tags:
          description: One or more tags associated with the OMI.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    ImageExportTask:
      description: Information about the OMI export task.
      properties:
        Comment:
          description: If the OMI export task fails, an error message appears.
          type: string
        ImageId:
          description: The ID of the OMI to be exported.
          type: string
        OsuExport:
          $ref: '#/components/schemas/OsuExport'
        Progress:
          description: The progress of the OMI export task, as a percentage.
          type: integer
        State:
          description: The state of the OMI export task (`pending/queued` \| `pending` \| `completed` \| `failed` \| `cancelled`).
          type: string
        TaskId:
          description: The ID of the OMI export task.
          type: string
      type: object
    InternetService:
      description: Information about the Internet service.
      properties:
        InternetServiceId:
          description: The ID of the Internet service.
          type: string
        NetId:
          description: The ID of the Net attached to the Internet service.
          type: string
        State:
          description: The state of the attachment of the Net to the Internet service (always `available`).
          type: string
        Tags:
          description: One or more tags associated with the Internet service.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    Keypair:
      description: Information about the keypair.
      properties:
        KeypairFingerprint:
          description: 'If you create a keypair, the SHA-1 digest of the DER encoded private key.<br />

            If you import a keypair, the MD5 public key fingerprint as specified in section 4 of RFC 4716.'
          type: string
        KeypairName:
          description: The name of the keypair.
          type: string
      type: object
    KeypairCreated:
      description: Information about the created keypair.
      properties:
        KeypairFingerprint:
          description: 'If you create a keypair, the SHA-1 digest of the DER encoded private key.<br />

            If you import a keypair, the MD5 public key fingerprint as specified in section 4 of RFC 4716.'
          type: string
        KeypairName:
          description: The name of the keypair.
          type: string
        PrivateKey:
          description: The private key.
          type: string
      type: object
    LinkFlexibleGpuRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        FlexibleGpuId:
          description: The ID of the fGPU you want to attach.
          type: string
        VmId:
          description: The ID of the VM you want to attach the fGPU to.
          type: string
      required:
      - FlexibleGpuId
      - VmId
      type: object
    LinkFlexibleGpuResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkInternetServiceRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        InternetServiceId:
          description: The ID of the Internet service you want to attach.
          type: string
        NetId:
          description: The ID of the Net to which you want to attach the Internet service.
          type: string
      required:
      - InternetServiceId
      - NetId
      type: object
    LinkInternetServiceResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkNic:
      description: Information about the NIC attachment.
      properties:
        DeleteOnVmDeletion:
          description: If `true`, the volume is deleted when the VM is terminated.
          type: boolean
        DeviceNumber:
          description: The device index for the NIC attachment (between 1 and 7, both included).
          type: integer
        LinkNicId:
          description: The ID of the NIC to attach.
          type: string
        State:
          description: The state of the attachment (`attaching` \| `attached` \| `detaching` \| `detached`).
          type: string
        VmAccountId:
          description: The account ID of the owner of the VM.
          type: string
        VmId:
          description: The ID of the VM.
          type: string
      type: object
    LinkNicLight:
      description: Information about the network interface card (NIC).
      properties:
        DeleteOnVmDeletion:
          description: If `true`, the volume is deleted when the VM is terminated.
          type: boolean
        DeviceNumber:
          description: The device index for the NIC attachment (between 1 and 7, both included).
          type: integer
        LinkNicId:
          description: The ID of the NIC to attach.
          type: string
        State:
          description: The state of the attachment (`attaching` \| `attached` \| `detaching` \| `detached`).
          type: string
      type: object
    LinkNicRequest:
      properties:
        DeviceNumber:
          description: The index of the VM device for the NIC attachment (between 1 and 7, both included).
          type: integer
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NicId:
          description: The ID of the NIC you want to attach.
          type: string
        VmId:
          description: The ID of the VM to which you want to attach the NIC.
          type: string
      required:
      - DeviceNumber
      - VmId
      - NicId
      type: object
    LinkNicResponse:
      properties:
        LinkNicId:
          description: The ID of the NIC attachment.
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkNicToUpdate:
      description: Information about the NIC attachment. If you are modifying the `DeleteOnVmDeletion` attribute, you must specify the ID of the NIC attachment.
      properties:
        DeleteOnVmDeletion:
          description: If `true`, the NIC is deleted when the VM is terminated.
          type: boolean
        LinkNicId:
          description: The ID of the NIC attachment.
          type: string
      type: object
    LinkPrivateIpsRequest:
      properties:
        AllowRelink:
          description: If `true`, allows an IP address that is already assigned to another NIC in the same Subnet to be assigned to the NIC you specified.
          type: boolean
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NicId:
          description: The ID of the NIC.
          type: string
        PrivateIps:
          description: The secondary private IP address or addresses you want to assign to the NIC within the IP address range of the Subnet.
          items:
            type: string
          type: array
        SecondaryPrivateIpCount:
          description: The number of secondary private IP addresses to assign to the NIC.
          type: integer
      required:
      - NicId
      type: object
    LinkPrivateIpsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkPublicIp:
      description: Information about the EIP association.
      properties:
        LinkPublicIpId:
          description: (Required in a Net) The ID representing the association of the EIP with the VM or the NIC.
          type: string
        PublicDnsName:
          description: The name of the public DNS.
          type: string
        PublicIp:
          description: The External IP address (EIP) associated with the NIC.
          type: string
        PublicIpAccountId:
          description: The account ID of the owner of the EIP.
          type: string
        PublicIpId:
          description: The allocation ID of the EIP.
          type: string
      type: object
    LinkPublicIpLightForVm:
      description: Information about the EIP associated with the NIC.
      properties:
        PublicDnsName:
          description: The name of the public DNS.
          type: string
        PublicIp:
          description: The External IP address (EIP) associated with the NIC.
          type: string
        PublicIpAccountId:
          description: The account ID of the owner of the EIP.
          type: string
      type: object
    LinkPublicIpRequest:
      properties:
        AllowRelink:
          description: '- If `true`, allows the EIP to be associated with the VM or NIC that you specify even if it is already associated with another VM or NIC.<br />

            - If `false`, prevents the EIP from being associated with the VM or NIC that you specify if it is already associated with another VM or NIC.<br /><br />

            (By default, `true` in the public Cloud, `false` in a Net.)'
          type: boolean
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NicId:
          description: '(Net only) The ID of the NIC. This parameter is required if the VM has more than one NIC attached. Otherwise, you need to specify the `VmId` parameter instead. You cannot specify both parameters at the same time. '
          type: string
        PrivateIp:
          description: (Net only) The primary or secondary private IP address of the specified NIC. By default, the primary private IP address.
          type: string
        PublicIp:
          description: The EIP. In the public Cloud, this parameter is required.
          type: string
        PublicIpId:
          description: The allocation ID of the EIP. In a Net, this parameter is required.
          type: string
        VmId:
          description: 'The ID of the VM.<br />

            - In the public Cloud, this parameter is required.<br />

            - In a Net, this parameter is required if the VM has only one NIC. Otherwise, you need to specify the `NicId` parameter instead. You cannot specify both parameters at the same time.'
          type: string
      type: object
    LinkPublicIpResponse:
      properties:
        LinkPublicIpId:
          description: (Net only) The ID representing the association of the EIP with the VM or the NIC.
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkRouteTable:
      description: One or more associations between the route table and the Subnets.
      properties:
        LinkRouteTableId:
          description: The ID of the association between the route table and the Subnet.
          type: string
        Main:
          description: If `true`, the route table is the main one.
          type: boolean
        RouteTableId:
          description: The ID of the route table.
          type: string
        SubnetId:
          description: The ID of the Subnet.
          type: string
      type: object
    LinkRouteTableRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        RouteTableId:
          description: The ID of the route table.
          type: string
        SubnetId:
          description: The ID of the Subnet.
          type: string
      required:
      - RouteTableId
      - SubnetId
      type: object
    LinkRouteTableResponse:
      properties:
        LinkRouteTableId:
          description: The ID of the association between the route table and the Subnet.
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkVirtualGatewayRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NetId:
          description: The ID of the Net to which you want to attach the virtual gateway.
          type: string
        VirtualGatewayId:
          description: The ID of the virtual gateway.
          type: string
      required:
      - NetId
      - VirtualGatewayId
      type: object
    LinkVirtualGatewayResponse:
      properties:
        NetToVirtualGatewayLink:
          $ref: '#/components/schemas/NetToVirtualGatewayLink'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkVolumeRequest:
      properties:
        DeviceName:
          description: The name of the device.
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        VmId:
          description: The ID of the VM you want to attach the volume to.
          type: string
        VolumeId:
          description: The ID of the volume you want to attach.
          type: string
      required:
      - DeviceName
      - VmId
      - VolumeId
      type: object
    LinkVolumeResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    LinkedVolume:
      description: Information about volume attachment.
      properties:
        DeleteOnVmDeletion:
          description: If `true`, the volume is deleted when the VM is terminated.
          type: boolean
        DeviceName:
          description: The name of the device.
          type: string
        State:
          description: The state of the attachment of the volume (`attaching` \| `detaching` \| `attached` \| `detached`).
          type: string
        VmId:
          description: The ID of the VM.
          type: string
        VolumeId:
          description: The ID of the volume.
          type: string
      type: object
    Listener:
      description: Information about the listener.
      properties:
        BackendPort:
          description: The port on which the back-end VM is listening (between `1` and `65535`, both included).
          type: integer
        BackendProtocol:
          description: The protocol for routing traffic to back-end VMs (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`\| `UDP`).
          type: string
        LoadBalancerPort:
          description: 'The port on which the load balancer is listening (between 1 and `65535`, both included). '
          type: integer
        LoadBalancerProtocol:
          description: The routing protocol (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`\| `UDP`).
          type: string
        PolicyNames:
          description: The names of the policies. If there are no policies enabled, the list is empty.
          items:
            type: string
          type: array
        ServerCertificateId:
          description: The ID of the server certificate.
          type: string
      type: object
    ListenerForCreation:
      description: Information about the listener to create.
      properties:
        BackendPort:
          description: The port on which the back-end VM is listening (between `1` and `65535`, both included).
          type: integer
        BackendProtocol:
          description: 'The protocol for routing traffic to back-end VMs (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`\| `UDP`). '
          type: string
        LoadBalancerPort:
          description: 'The port on which the load balancer is listening (between `1` and `65535`, both included). '
          type: integer
        LoadBalancerProtocol:
          description: The routing protocol (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`\| `UDP`).
          type: string
        ServerCertificateId:
          description: The ID of the server certificate.
          type: string
      required:
      - BackendPort
      - LoadBalancerPort
      - LoadBalancerProtocol
      type: object
    LoadBalancer:
      description: Information about the load balancer.
      properties:
        AccessLog:
          $ref: '#/components/schemas/AccessLog'
        ApplicationStickyCookiePolicies:
          description: The stickiness policies defined for the load balancer.
          items:
            $ref: '#/components/schemas/ApplicationStickyCookiePolicy'
          type: array
        BackendVmIds:
          description: One or more IDs of back-end VMs for the load balancer.
          items:
            type: string
          type: array
        DnsName:
          description: The DNS name of the load balancer.
          type: string
        HealthCheck:
          $ref: '#/components/schemas/HealthCheck'
        Listeners:
          description: The listeners for the load balancer.
          items:
            $ref: '#/components/schemas/Listener'
          type: array
        LoadBalancerName:
          description: The name of the load balancer.
          type: string
        LoadBalancerStickyCookiePolicies:
          description: The policies defined for the load balancer.
          items:
            $ref: '#/components/schemas/LoadBalancerStickyCookiePolicy'
          type: array
        LoadBalancerType:
          description: 'The type of load balancer. Valid only for load balancers in a Net.<br />

            If `LoadBalancerType` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP address.<br />

            If `LoadBalancerType` is `internal`, the load balancer has a public DNS name that resolves to a private IP address.'
          type: string
        NetId:
          description: The ID of the Net for the load balancer.
          type: string
        SecurityGroups:
          description: One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
          items:
            type: string
          type: array
        SourceSecurityGroup:
          $ref: '#/components/schemas/SourceSecurityGroup'
        Subnets:
          description: The IDs of the Subnets for the load balancer.
          items:
            type: string
          type: array
        SubregionNames:
          description: The name(s) of the Subregion(s) for the load balancer.
          items:
            type: string
          type: array
        Tags:
          description: One or more tags associated with the load balancer.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    LoadBalancerStickyCookiePolicy:
      description: Information about the stickiness policy.
      properties:
        PolicyName:
          description: The name of the stickiness policy.
          type: string
      type: object
    Location:
      description: Information about the DirectLink location.
      properties:
        Code:
          description: The location code, to be set as the `Location` parameter of the *CreateDirectLink* method when creating a DirectLink.
          type: string
        Name:
          description: The name and description of the location, corresponding to a datacenter.
          type: string
      type: object
    Log:
      description: Information about the log.
      properties:
        AccountId:
          description: The account ID.
          type: string
        CallDuration:
          description: The duration of the call (in milliseconds).
          type: integer
        QueryAccessKey:
          description: The API key used for the query.
          type: string
        QueryApiName:
          description: The name of the API service used by the call.
          type: string
        QueryApiVersion:
          description: The version of the API service used by the call.
          type: string
        QueryCallName:
          description: The name of the call.
          type: string
        QueryDate:
          description: The date and time of the query (in ISO 8601 base or extended format).
          format: date
          type: string
        QueryHeaderRaw:
          description: The query header raw.
          type: string
        QueryHeaderSize:
          description: The query header size.
          type: integer
        QueryIpAddress:
          description: The IP address used for the query.
          type: string
        QueryPayloadRaw:
          description: The query payload raw.
          type: string
        QueryPayloadSize:
          description: The query payload size.
          type: integer
        QueryUserAgent:
          description: The user agent used for the HTTP request.
          type: string
        RequestId:
          description: The ID provided in the response.
          type: string
        ResponseSize:
          description: The size of the response (in bytes).
          type: integer
        ResponseStatusCode:
          description: The HTTP code provided in the response.
          type: integer
      type: object
    MaintenanceEvent:
      description: Information about the maintenance event.
      properties:
        Code:
          description: The code of the event (`system-reboot` \| `system-maintenance`).
          type: string
        Description:
          description: The description of the event.
          type: string
        NotAfter:
          description: The latest scheduled end time for the event.
          format: date
          type: string
        NotBefore:
          description: The earliest scheduled start time for the event.
          format: date
          type: string
      type: object
    NatService:
      description: Information about the NAT service.
      properties:
        NatServiceId:
          description: The ID of the NAT service.
          type: string
        NetId:
          description: The ID of the Net in which the NAT service is.
          type: string
        PublicIps:
          description: Information about the External IP address or addresses (EIPs) associated with the NAT service.
          items:
            $ref: '#/components/schemas/PublicIpLight'
          type: array
        State:
          description: The state of the NAT service (`pending` \| `available` \| `deleting` \| `deleted`).
          type: string
        SubnetId:
          description: The ID of the Subnet in which the NAT service is.
          type: string
      type: object
    Net:
      description: Information about the Net.
      properties:
        DhcpOptionsSetId:
          description: The ID of the DHCP options set (or `default` if you want to associate the default one).
          type: string
        IpRange:
          description: The IP range for the Net, in CIDR notation (for example, 10.0.0.0/16).
          type: string
        NetId:
          description: The ID of the Net.
          type: string
        State:
          description: The state of the Net (`pending` \| `available`).
          type: string
        Tags:
          description: One or more tags associated with the Net.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        Tenancy:
          description: The VM tenancy in a Net.
          type: string
      type: object
    NetAccessPoint:
      description: Information about the Net access point.
      properties:
        NetAccessPointId:
          description: The ID of the Net access point.
          type: string
        NetId:
          description: The ID of the Net with which the Net access point is associated.
          type: string
        RouteTableIds:
          description: The ID of the route tables associated with the Net access point.
          items:
            type: string
          type: array
        ServiceName:
          description: The name of the prefix list corresponding to the service with which the Net access point is associated.
          type: string
        State:
          description: The state of the Net access point (`pending` \| `available` \| `deleting` \| `deleted`).
          type: string
      type: object
    NetPeering:
      description: Information about the Net peering connection.
      properties:
        AccepterNet:
          $ref: '#/components/schemas/AccepterNet'
        NetPeeringId:
          description: The ID of the Net peering connection.
          type: string
        SourceNet:
          $ref: '#/components/schemas/SourceNet'
        State:
          $ref: '#/components/schemas/NetPeeringState'
        Tags:
          description: One or more tags associated with the Net peering connection.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    NetPeeringState:
      description: Information about the state of the Net peering connection.
      properties:
        Message:
          description: Additional information about the state of the Net peering connection.
          type: string
        Name:
          description: 'The state of the Net peering connection (`pending-acceptance` \| `active` \| `rejected` \| `failed` \| `expired` \| `deleted`). '
          type: string
      type: object
    NetToVirtualGatewayLink:
      description: Information about the attachment.
      properties:
        NetId:
          description: The ID of the Net to which the virtual gateway is attached.
          type: string
        State:
          description: The state of the attachment (`attaching` \| `attached` \| `detaching` \| `detached`).
          type: string
      type: object
    Nic:
      description: Information about the NIC.
      properties:
        AccountId:
          description: The account ID of the owner of the NIC.
          type: string
        Description:
          description: The description of the NIC.
          type: string
        IsSourceDestChecked:
          description: (Net only) If `true`, the source/destination check is enabled. If `false`, it is disabled. This value must be `false` for a NAT VM to perform network address translation (NAT) in a Net.
          type: boolean
        LinkNic:
          $ref: '#/components/schemas/LinkNic'
        LinkPublicIp:
          $ref: '#/components/schemas/LinkPublicIp'
        MacAddress:
          description: The Media Access Control (MAC) address of the NIC.
          type: string
        NetId:
          description: The ID of the Net for the NIC.
          type: string
        NicId:
          description: The ID of the NIC.
          type: string
        PrivateDnsName:
          description: The name of the private DNS.
          type: string
        PrivateIps:
          description: The private IP addresses of the NIC.
          items:
            $ref: '#/components/schemas/PrivateIp'
          type: array
        SecurityGroups:
          description: One or more IDs of security groups for the NIC.
          items:
            $ref: '#/components/schemas/SecurityGroupLight'
          type: array
        State:
          description: 'The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`). '
          type: string
        SubnetId:
          description: The ID of the Subnet.
          type: string
        SubregionName:
          description: The Subregion in which the NIC is located.
          type: string
        Tags:
          description: One or more tags associated with the NIC.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    NicForVmCreation:
      description: Information about the network interface card (NIC) when creating a virtual machine (VM).
      properties:
        DeleteOnVmDeletion:
          description: If `true`, the NIC is deleted when the VM is terminated. You can specify `true` only if you create a NIC when creating a VM.
          type: boolean
        Description:
          description: The description of the NIC, if you are creating a NIC when creating the VM.
          type: string
        DeviceNumber:
          description: The index of the VM device for the NIC attachment (between 0 and 7, both included). This parameter is required if you create a NIC when creating the VM.
          type: integer
        NicId:
          description: The ID of the NIC, if you are attaching an existing NIC when creating a VM.
          type: string
        PrivateIps:
          description: One or more private IP addresses to assign to the NIC, if you create a NIC when creating a VM. Only one private IP address can be the primary private IP address.
          items:
            $ref: '#/components/schemas/PrivateIpLight'
          type: array
        SecondaryPrivateIpCount:
          description: The number of secondary private IP addresses, if you create a NIC when creating a VM. This parameter cannot be specified if you specified more than one private IP address in the `PrivateIps` parameter.
          type: integer
        SecurityGroupIds:
          description: One or more IDs of security groups for the NIC, if you acreate a NIC when creating a VM.
          items:
            type: string
          type: array
        SubnetId:
          description: The ID of the Subnet for the NIC, if you create a NIC when creating a VM.
          type: string
      type: object
    NicLight:
      description: Information about the network interface card (NIC).
      properties:
        AccountId:
          description: The account ID of the owner of the NIC.
          type: string
        Description:
          description: The description of the NIC.
          type: string
        IsSourceDestChecked:
          description: (Net only) If `true`, the source/destination check is enabled. If `false`, it is disabled. This value must be `false` for a NAT VM to perform network address translation (NAT) in a Net.
          type: boolean
        LinkNic:
          $ref: '#/components/schemas/LinkNicLight'
        LinkPublicIp:
          $ref: '#/components/schemas/LinkPublicIpLightForVm'
        MacAddress:
          description: The Media Access Control (MAC) address of the NIC.
          type: string
        NetId:
          description: The ID of the Net for the NIC.
          type: string
        NicId:
          description: The ID of the NIC.
          type: string
        PrivateDnsName:
          description: The name of the private DNS.
          type: string
        PrivateIps:
          description: The private IP address or addresses of the NIC.
          items:
            $ref: '#/components/schemas/PrivateIpLightForVm'
          type: array
        SecurityGroups:
          description: One or more IDs of security groups for the NIC.
          items:
            $ref: '#/components/schemas/SecurityGroupLight'
          type: array
        State:
          description: 'The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`). '
          type: string
        SubnetId:
          description: The ID of the Subnet for the NIC.
          type: string
      type: object
    OsuApiKey:
      description: Information about the OSU API key.
      properties:
        ApiKeyId:
          description: The API key of the OSU account that enables you to access the bucket.
          type: string
        SecretKey:
          description: The secret key of the OSU account that enables you to access the bucket.
          type: string
      type: object
    OsuExport:
      description: Information about the OSU export.
      properties:
        DiskImageFormat:
          description: The format of the export disk (`qcow2` \| `vdi` \| `vmdk`).
          type: string
        OsuApiKey:
          $ref: '#/components/schemas/OsuApiKey'
        OsuBucket:
          description: The name of the OSU bucket you want to export the object to.
          type: string
        OsuManifestUrl:
          description: The URL of the manifest file.
          type: string
        OsuPrefix:
          description: 'The prefix for the key of the OSU object. This key follows this format: `prefix + object_export_task_id + ''.'' + disk_image_format`.'
          type: string
      required:
      - DiskImageFormat
      - OsuBucket
      type: object
    PermissionsOnResource:
      description: Information about the users who have permissions for the resource.
      properties:
        AccountIds:
          description: The account ID of one or more users who have permissions for the resource.
          items:
            type: string
          type: array
        GlobalPermission:
          description: If `true`, the resource is public. If `false`, the resource is private.
          type: boolean
      type: object
    PermissionsOnResourceCreation:
      description: Information about the permissions for the resource.
      properties:
        Additions:
          $ref: '#/components/schemas/PermissionsOnResource'
        Removals:
          $ref: '#/components/schemas/PermissionsOnResource'
      type: object
    Placement:
      description: Information about the placement of the VM.
      properties:
        SubregionName:
          description: The name of the subregion.
          type: string
        Tenancy:
          description: The tenancy of the VM (`default`\|`dedicated`).
          type: string
      type: object
    PrivateIp:
      description: Information about the private IP.
      properties:
        IsPrimary:
          description: If `true`, the IP address is the primary private IP address of the NIC.
          type: boolean
        LinkPublicIp:
          $ref: '#/components/schemas/LinkPublicIp'
        PrivateDnsName:
          description: The name of the private DNS.
          type: string
        PrivateIp:
          description: The private IP address of the NIC.
          type: string
      type: object
    PrivateIpLight:
      description: Information about the private IP.
      properties:
        IsPrimary:
          description: If `true`, the IP address is the primary private IP address of the NIC.
          type: boolean
        PrivateIp:
          description: The private IP address of the NIC.
          type: string
      type: object
    PrivateIpLightForVm:
      description: Information about the private IP of the NIC.
      properties:
        IsPrimary:
          description: If `true`, the IP address is the primary private IP address of the NIC.
          type: boolean
        LinkPublicIp:
          $ref: '#/components/schemas/LinkPublicIpLightForVm'
        PrivateDnsName:
          description: The name of the private DNS.
          type: string
        PrivateIp:
          description: The private IP address.
          type: string
      type: object
    ProductType:
      description: Information about the product type.
      properties:
        Description:
          description: The description of the product type.
          type: string
        ProductTypeId:
          description: The ID of the product type.
          type: string
        Vendor:
          description: The vendor of the product type.
          type: string
      type: object
    PublicIp:
      description: Information about the public IP.
      properties:
        LinkPublicIpId:
          description: (Required in a Net) The ID representing the association of the EIP with the VM or the NIC.
          type: string
        NicAccountId:
          description: The account ID of the owner of the NIC.
          type: string
        NicId:
          description: The ID of the NIC the EIP is associated with (if any).
          type: string
        PrivateIp:
          description: The private IP address associated with the EIP.
          type: string
        PublicIp:
          description: The External IP address (EIP) associated with the NAT service.
          type: string
        PublicIpId:
          description: The allocation ID of the EIP associated with the NAT service.
          type: string
        VmId:
          description: The ID of the VM the External IP (EIP) is associated with (if any).
          type: string
      type: object
    PublicIpLight:
      description: Information about the public IP.
      properties:
        PublicIp:
          description: The External IP address (EIP) associated with the NAT service.
          type: string
        PublicIpId:
          description: The allocation ID of the EIP associated with the NAT service.
          type: string
      type: object
    Quota:
      description: Information about the quota.
      properties:
        AccountId:
          description: The account ID of the owner of the quotas.
          type: string
        Description:
          description: The description of the quota.
          type: string
        MaxValue:
          description: The maximum value of the quota for the 3DS OUTSCALE user account (if there is no limit, `0`).
          type: integer
        Name:
          description: The unique name of the quota.
          type: string
        QuotaCollection:
          description: The group name of the quota.
          type: string
        ShortDescription:
          description: The description of the quota.
          type: string
        UsedValue:
          description: The limit value currently used by the 3DS OUTSCALE user account.
          type: integer
      type: object
    QuotaTypes:
      description: One or more quotas.
      properties:
        QuotaType:
          description: The resource ID if it is a resource-specific quota, `global` if it is not.
          type: string
        Quotas:
          description: One or more quotas associated with the user.
          items:
            $ref: '#/components/schemas/Quota'
          type: array
      type: object
    ReadAdminPasswordRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        VmId:
          description: The ID of the VM.
          type: string
      required:
      - VmId
      type: object
    ReadAdminPasswordResponse:
      properties:
        AdminPassword:
          description: The password of the VM. After the first boot, returns an empty string.
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VmId:
          description: The ID of the VM.
          type: string
      type: object
    ReadApiLogsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersApiLog'
        NextPageToken:
          description: The token to request the next page of results.
          type: string
        ResultsPerPage:
          description: The maximum number of items returned in a single page. By default, 100.
          type: integer
        With:
          $ref: '#/components/schemas/With'
      type: object
    ReadApiLogsResponse:
      properties:
        Logs:
          description: Information displayed in one or more API logs.
          items:
            $ref: '#/components/schemas/Log'
          type: array
        NextPageToken:
          description: The token to request the next page of results.
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadClientGatewaysRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersClientGateway'
      type: object
    ReadClientGatewaysResponse:
      properties:
        ClientGateways:
          description: Information about one or more client gateways.
          items:
            $ref: '#/components/schemas/ClientGateway'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadConsoleOutputRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        VmId:
          description: The ID of the VM.
          type: string
      required:
      - VmId
      type: object
    ReadConsoleOutputResponse:
      properties:
        ConsoleOutput:
          description: The Base64-encoded output of the console. If a command line tool is used, the output is decoded by the tool.
          type: string
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VmId:
          description: The ID of the VM.
          type: string
      type: object
    ReadDhcpOptionsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersDhcpOptions'
      type: object
    ReadDhcpOptionsResponse:
      properties:
        DhcpOptionsSets:
          description: Information about one or more DHCP options sets.
          items:
            $ref: '#/components/schemas/DhcpOptionsSet'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadDirectLinkInterfacesRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersDirectLinkInterface'
      type: object
    ReadDirectLinkInterfacesResponse:
      properties:
        DirectLinkInterfaces:
          description: Information about one or more DirectLink interfaces.
          items:
            $ref: '#/components/schemas/DirectLinkInterfaces'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadDirectLinksRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersDirectLink'
      type: object
    ReadDirectLinksResponse:
      properties:
        DirectLinks:
          description: Information about one or more DirectLinks.
          items:
            $ref: '#/components/schemas/DirectLink'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadFlexibleGpusRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersFlexibleGpu'
      type: object
    ReadFlexibleGpusResponse:
      properties:
        FlexibleGpus:
          description: Information about one or more fGPUs.
          items:
            $ref: '#/components/schemas/FlexibleGpu'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadImageExportTasksRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersExportTask'
      type: object
    ReadImageExportTasksResponse:
      properties:
        ImageExportTasks:
          description: Information about one or more image export tasks.
          items:
            $ref: '#/components/schemas/ImageExportTask'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadImagesRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersImage'
      type: object
    ReadImagesResponse:
      properties:
        Images:
          description: Information about the described OMI(s).
          items:
            $ref: '#/components/schemas/Image'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadInternetServicesRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersInternetService'
      type: object
    ReadInternetServicesResponse:
      properties:
        InternetServices:
          description: Information about the described Internet service(s).
          items:
            $ref: '#/components/schemas/InternetService'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadKeypairsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersKeypair'
      type: object
    ReadKeypairsResponse:
      properties:
        Keypairs:
          description: Information about one or more keypairs.
          items:
            $ref: '#/components/schemas/Keypair'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadLoadBalancersRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersLoadBalancer'
      type: object
    ReadLoadBalancersResponse:
      properties:
        LoadBalancers:
          description: Information about one or more load balancers.
          items:
            $ref: '#/components/schemas/LoadBalancer'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadLocationsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
      type: object
    ReadLocationsResponse:
      properties:
        Locations:
          description: Information about one or more locations.
          items:
            $ref: '#/components/schemas/Location'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadNatServicesRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersNatService'
      type: object
    ReadNatServicesResponse:
      properties:
        NatServices:
          description: Information about one or more NAT services.
          items:
            $ref: '#/components/schemas/NatService'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadNetAccessPointServicesRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersService'
      type: object
    ReadNetAccessPointServicesResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Services:
          description: The names of the services you can use for Net access points.
          items:
            $ref: '#/components/schemas/Service'
          type: array
      type: object
    ReadNetAccessPointsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersNetAccessPoint'
      type: object
    ReadNetAccessPointsResponse:
      properties:
        NetAccessPoints:
          description: One or more Net access points.
          items:
            $ref: '#/components/schemas/NetAccessPoint'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadNetPeeringsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersNetPeering'
      type: object
    ReadNetPeeringsResponse:
      properties:
        NetPeerings:
          description: Information about one or more Net peering connections.
          items:
            $ref: '#/components/schemas/NetPeering'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadNetsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersNet'
      type: object
    ReadNetsResponse:
      properties:
        Nets:
          description: Information about the described Nets.
          items:
            $ref: '#/components/schemas/Net'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadNicsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersNic'
      type: object
    ReadNicsResponse:
      properties:
        Nics:
          description: Information about one or more NICs.
          items:
            $ref: '#/components/schemas/Nic'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadProductTypesRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersProductType'
      type: object
    ReadProductTypesResponse:
      properties:
        ProductTypes:
          description: Information about one or more product types.
          items:
            $ref: '#/components/schemas/ProductType'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadPublicIpRangesRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
      type: object
    ReadPublicIpRangesResponse:
      properties:
        PublicIps:
          description: The list of public IPv4 addresses used in the Region, in CIDR notation.
          items:
            type: string
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadPublicIpsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersPublicIp'
      type: object
    ReadPublicIpsResponse:
      properties:
        PublicIps:
          description: Information about one or more EIPs.
          items:
            $ref: '#/components/schemas/PublicIp'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadQuotasRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersQuota'
      type: object
    ReadQuotasResponse:
      properties:
        QuotaTypes:
          description: Information about one or more quotas.
          items:
            $ref: '#/components/schemas/QuotaTypes'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadRouteTablesRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersRouteTable'
      type: object
    ReadRouteTablesResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        RouteTables:
          description: Information about one or more route tables.
          items:
            $ref: '#/components/schemas/RouteTable'
          type: array
      type: object
    ReadSecurityGroupsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersSecurityGroup'
      type: object
    ReadSecurityGroupsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        SecurityGroups:
          description: Information about one or more security groups.
          items:
            $ref: '#/components/schemas/SecurityGroup'
          type: array
      type: object
    ReadSnapshotExportTasksRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersExportTask'
      type: object
    ReadSnapshotExportTasksResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        SnapshotExportTasks:
          description: Information about one or more snapshot export tasks.
          items:
            $ref: '#/components/schemas/SnapshotExportTask'
          type: array
      type: object
    ReadSnapshotsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersSnapshot'
      type: object
    ReadSnapshotsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Snapshots:
          description: Information about one or more snapshots and their permissions.
          items:
            $ref: '#/components/schemas/Snapshot'
          type: array
      type: object
    ReadSubnetsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersSubnet'
      type: object
    ReadSubnetsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Subnets:
          description: Information about one or more Subnets.
          items:
            $ref: '#/components/schemas/Subnet'
          type: array
      type: object
    ReadSubregionsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersSubregion'
      type: object
    ReadSubregionsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Subregions:
          description: Information about one or more Subregions.
          items:
            $ref: '#/components/schemas/Subregion'
          type: array
      type: object
    ReadTagsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersTag'
      type: object
    ReadTagsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Tags:
          description: Information about one or more tags.
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      type: object
    ReadVirtualGatewaysRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersVirtualGateway'
      type: object
    ReadVirtualGatewaysResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VirtualGateways:
          description: Information about one or more virtual gateways.
          items:
            $ref: '#/components/schemas/VirtualGateway'
          type: array
      type: object
    ReadVmTypesRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersVmType'
      type: object
    ReadVmTypesResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VmTypes:
          description: Information about one or more VM types.
          items:
            $ref: '#/components/schemas/VmType'
          type: array
      type: object
    ReadVmsHealthRequest:
      properties:
        BackendVmIds:
          description: One or more IDs of back-end VMs.
          items:
            type: string
          type: array
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerName:
          description: The name of the load balancer.
          type: string
      required:
      - LoadBalancerName
      type: object
    ReadVmsHealthResponse:
      properties:
        BackendVmHealth:
          description: Information about the health of one or more back-end VMs.
          items:
            $ref: '#/components/schemas/BackendVmHealth'
          type: array
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ReadVmsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersVm'
      type: object
    ReadVmsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Vms:
          description: Information about one or more VMs.
          items:
            $ref: '#/components/schemas/Vm'
          type: array
      type: object
    ReadVmsStateRequest:
      properties:
        AllVms:
          description: If `true`, includes the status of all VMs. If `false`, only includes the status of running VMs.
          type: boolean
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersVmsState'
      type: object
    ReadVmsStateResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VmStates:
          description: Information about one or more VM states.
          items:
            $ref: '#/components/schemas/VmStates'
          type: array
      type: object
    ReadVolumesRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersVolume'
      type: object
    ReadVolumesResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Volumes:
          description: Information about one or more volumes.
          items:
            $ref: '#/components/schemas/Volume'
          type: array
      type: object
    ReadVpnConnectionsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Filters:
          $ref: '#/components/schemas/FiltersVpnConnection'
      type: object
    ReadVpnConnectionsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        VpnConnections:
          description: Information about one or more VPN connections.
          items:
            $ref: '#/components/schemas/VpnConnection'
          type: array
      type: object
    RebootVmsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        VmIds:
          description: The ID(s) of the VM(s) you want to reboot.
          items:
            type: string
          type: array
      required:
      - VmIds
      type: object
    RebootVmsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    RegisterVmsInLoadBalancerRequest:
      properties:
        BackendVmIds:
          description: 'One or more IDs of back-end VMs.<br />

            Specifying the same ID several times has no effect as each back-end VM has equal weight.'
          items:
            type: string
          type: array
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        LoadBalancerName:
          description: The name of the load balancer.
          type: string
      required:
      - BackendVmIds
      - LoadBalancerName
      type: object
    RegisterVmsInLoadBalancerResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    RejectNetPeeringRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NetPeeringId:
          description: The ID of the Net peering connection you want to reject.
          type: string
      required:
      - NetPeeringId
      type: object
    RejectNetPeeringResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    ResourceTag:
      description: Information about the tag.
      properties:
        Key:
          description: The key of the tag, with a minimum of 1 character.
          type: string
        Value:
          description: The value of the tag, between 0 and 255 characters.
          type: string
      required:
      - Key
      - Value
      type: object
    ResponseContext:
      description: Information about the context of the response.
      properties:
        RequestId:
          description: The ID of the request.
          type: string
      type: object
    Route:
      description: Information about the route.
      properties:
        CreationMethod:
          description: The method used to create the route.
          type: string
        DestinationIpRange:
          description: The IP range used for the destination match, in CIDR notation (for example, 10.0.0.0/24).
          type: string
        DestinationServiceId:
          description: The ID of the 3DS OUTSCALE service.
          type: string
        GatewayId:
          description: The ID of the Internet service or virtual gateway attached to the Net.
          type: string
        NatServiceId:
          description: The ID of a NAT service attached to the Net.
          type: string
        NetAccessPointId:
          description: The ID of the Net access point.
          type: string
        NetPeeringId:
          description: The ID of the Net peering connection.
          type: string
        NicId:
          description: The ID of the NIC.
          type: string
        State:
          description: The state of a route in the route table (`active` \| `blackhole`). The `blackhole` state indicates that the target of the route is not available.
          type: string
        VmAccountId:
          description: The account ID of the owner of the VM.
          type: string
        VmId:
          description: The ID of a VM specified in a route in the table.
          type: string
      type: object
    RouteLight:
      description: Information about the route.
      properties:
        DestinationIpRange:
          description: The IP range used for the destination match, in CIDR notation (for example, 10.0.0.0/24).
          type: string
        RouteType:
          description: The type of route (always `static`).
          type: string
        State:
          description: The current state of the static route (`pending` \| `available` \| `deleting` \| `deleted`).
          type: string
      type: object
    RoutePropagatingVirtualGateway:
      description: Information about the route propagating virtual gateway.
      properties:
        VirtualGatewayId:
          description: The ID of the virtual gateway.
          type: string
      type: object
    RouteTable:
      description: Information about the route table.
      properties:
        LinkRouteTables:
          description: One or more associations between the route table and Subnets.
          items:
            $ref: '#/components/schemas/LinkRouteTable'
          type: array
        NetId:
          description: The ID of the Net for the route table.
          type: string
        RoutePropagatingVirtualGateways:
          description: Information about virtual gateways propagating routes.
          items:
            $ref: '#/components/schemas/RoutePropagatingVirtualGateway'
          type: array
        RouteTableId:
          description: The ID of the route table.
          type: string
        Routes:
          description: One or more routes in the route table.
          items:
            $ref: '#/components/schemas/Route'
          type: array
        Tags:
          description: One or more tags associated with the route table.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    SecurityGroup:
      description: Information about the security group.
      properties:
        AccountId:
          description: The account ID of a user that has been granted permission.
          type: string
        Description:
          description: The description of the security group.
          type: string
        InboundRules:
          description: The inbound rules associated with the security group.
          items:
            $ref: '#/components/schemas/SecurityGroupRule'
          type: array
        NetId:
          description: The ID of the Net for the security group.
          type: string
        OutboundRules:
          description: The outbound rules associated with the security group.
          items:
            $ref: '#/components/schemas/SecurityGroupRule'
          type: array
        SecurityGroupId:
          description: The ID of the security group.
          type: string
        SecurityGroupName:
          description: (Public Cloud only) The name of the security group.
          type: string
        Tags:
          description: One or more tags associated with the security group.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    SecurityGroupLight:
      description: Information about the security group.
      properties:
        SecurityGroupId:
          description: The ID of the security group.
          type: string
        SecurityGroupName:
          description: (Public Cloud only) The name of the security group.
          type: string
      type: object
    SecurityGroupRule:
      description: Information about the security group rule.
      properties:
        FromPortRange:
          description: The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
          type: integer
        IpProtocol:
          description: The IP protocol name (`tcp`, `udp`, `icmp`) or protocol number. By default, `-1`, which means all protocols.
          type: string
        IpRanges:
          description: One or more IP ranges for the security group rules, in CIDR notation (for example, 10.0.0.0/16).
          items:
            type: string
          type: array
        SecurityGroupsMembers:
          description: Information about one or more members of a security group.
          items:
            $ref: '#/components/schemas/SecurityGroupsMember'
          type: array
        ServiceIds:
          description: One or more service IDs to allow traffic from a Net to access the corresponding 3DS OUTSCALE services. For more information, see [ReadNetAccessPointServices](#readnetaccesspointservices).
          items:
            type: string
          type: array
        ToPortRange:
          description: The end of the port range for the TCP and UDP protocols, or an ICMP type number.
          type: integer
      type: object
    SecurityGroupsMember:
      description: Information about the member of a security group.
      properties:
        AccountId:
          description: The account ID of a user.
          type: string
        SecurityGroupId:
          description: The ID of the security group.
          type: string
        SecurityGroupName:
          description: (Public Cloud only) The name of the security group.
          type: string
      type: object
    Service:
      description: Information about the service.
      properties:
        IpRanges:
          description: The list of network prefixes used by the service, in CIDR notation.
          items:
            type: string
          type: array
        ServiceId:
          description: The ID of the service.
          type: string
        ServiceName:
          description: The name of the prefix list, which identifies the 3DS OUTSCALE service it is associated with.
          type: string
      type: object
    Snapshot:
      description: Information about the snapshot.
      properties:
        AccountAlias:
          description: The account alias of the owner of the snapshot.
          type: string
        AccountId:
          description: The account ID of the owner of the snapshot.
          type: string
        Description:
          description: The description of the snapshot.
          type: string
        PermissionsToCreateVolume:
          $ref: '#/components/schemas/PermissionsOnResource'
        Progress:
          description: The progress of the snapshot, as a percentage.
          type: integer
        SnapshotId:
          description: The ID of the snapshot.
          type: string
        State:
          description: The state of the snapshot (`in-queue`\| `pending` \| `completed`).
          type: string
        Tags:
          description: One or more tags associated with the snapshot.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        VolumeId:
          description: The ID of the volume used to create the snapshot.
          type: string
        VolumeSize:
          description: The size of the volume used to create the snapshot, in gibibytes (GiB).
          type: integer
      type: object
    SnapshotExportTask:
      description: Information about the snapshot export task.
      properties:
        Comment:
          description: If the snapshot export task fails, an error message appears.
          type: string
        OsuExport:
          $ref: '#/components/schemas/OsuExport'
        Progress:
          description: The progress of the snapshot export task, as a percentage.
          type: integer
        SnapshotId:
          description: The ID of the snapshot to be exported.
          type: string
        State:
          description: The state of the snapshot export task (`pending` \| `active` \| `completed` \| `failed`).
          type: string
        TaskId:
          description: The ID of the snapshot export task.
          type: string
      type: object
    SourceNet:
      description: Information about the source Net.
      properties:
        AccountId:
          description: The account ID of the owner of the source Net.
          type: string
        IpRange:
          description: The IP range for the source Net, in CIDR notation (for example, 10.0.0.0/16).
          type: string
        NetId:
          description: The ID of the source Net.
          type: string
      type: object
    SourceSecurityGroup:
      description: 'Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />

        To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.'
      properties:
        SecurityGroupAccountId:
          description: The account ID of the owner of the security group.
          type: string
        SecurityGroupName:
          description: (Public Cloud only) The name of the security group.
          type: string
      type: object
    StartVmsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        VmIds:
          description: One or more IDs of VMs.
          items:
            type: string
          type: array
      required:
      - VmIds
      type: object
    StartVmsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Vms:
          description: Information about one or more started VMs.
          items:
            $ref: '#/components/schemas/VmState'
          type: array
      type: object
    StateComment:
      description: Information about the change of state.
      properties:
        StateCode:
          description: The code of the change of state.
          type: string
        StateMessage:
          description: A message explaining the change of state.
          type: string
      type: object
    StopVmsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        ForceStop:
          description: Forces the VM to stop.
          type: boolean
        VmIds:
          description: One or more IDs of VMs.
          items:
            type: string
          type: array
      required:
      - VmIds
      type: object
    StopVmsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Vms:
          description: Information about one or more stopped VMs.
          items:
            $ref: '#/components/schemas/VmState'
          type: array
      type: object
    Subnet:
      description: Information about the Subnet.
      properties:
        AvailableIpsCount:
          description: The number of available IP addresses in the Subnets.
          type: integer
        IpRange:
          description: The IP range in the Subnet, in CIDR notation (for example, 10.0.0.0/16).
          type: string
        MapPublicIpOnLaunch:
          description: If `true`, a public IP address is assigned to the network interface cards (NICs) created in the specified Subnet.
          type: boolean
        NetId:
          description: The ID of the Net in which the Subnet is.
          type: string
        State:
          description: The state of the Subnet (`pending` \| `available`).
          type: string
        SubnetId:
          description: The ID of the Subnet.
          type: string
        SubregionName:
          description: The name of the Subregion in which the Subnet is located.
          type: string
        Tags:
          description: One or more tags associated with the Subnet.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
      type: object
    Subregion:
      description: Information about the Subregion.
      properties:
        RegionName:
          description: The name of the Region containing the Subregion.
          type: string
        State:
          description: The state of the Subregion (`available` \| `information` \| `impaired` \| `unavailable`).
          type: string
        SubregionName:
          description: The name of the Subregion.
          type: string
      type: object
    Tag:
      description: Information about the tag.
      properties:
        Key:
          description: The key of the tag, with a minimum of 1 character.
          type: string
        ResourceId:
          description: The ID of the resource.
          type: string
        ResourceType:
          description: The type of the resource.
          type: string
        Value:
          description: The value of the tag, between 0 and 255 characters.
          type: string
      type: object
    UnlinkFlexibleGpuRequest:
      properties:
        DryRun:
          description: 'If `true`, checks whether you have the required permissions to perform the action. '
          type: boolean
        FlexibleGpuId:
          description: The ID of the fGPU you want to detach from your VM.
          type: string
      required:
      - FlexibleGpuId
      type: object
    UnlinkFlexibleGpuResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkInternetServiceRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        InternetServiceId:
          description: The ID of the Internet service you want to detach.
          type: string
        NetId:
          description: The ID of the Net from which you want to detach the Internet service.
          type: string
      required:
      - InternetServiceId
      - NetId
      type: object
    UnlinkInternetServiceResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkNicRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        LinkNicId:
          description: The ID of the attachment operation.
          type: string
      required:
      - LinkNicId
      type: object
    UnlinkNicResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkPrivateIpsRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NicId:
          description: The ID of the NIC.
          type: string
        PrivateIps:
          description: One or more secondary private IP addresses you want to unassign from the NIC.
          items:
            type: string
          type: array
      required:
      - NicId
      - PrivateIps
      type: object
    UnlinkPrivateIpsResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkPublicIpRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        LinkPublicIpId:
          description: (Required in a Net) The ID representing the association of the EIP with the VM or the NIC.
          type: string
        PublicIp:
          description: The External IP address. In the public Cloud, this parameter is required.
          type: string
      type: object
    UnlinkPublicIpResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkRouteTableRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        LinkRouteTableId:
          description: The ID of the association between the route table and the Subnet.
          type: string
      required:
      - LinkRouteTableId
      type: object
    UnlinkRouteTableResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkVirtualGatewayRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NetId:
          description: The ID of the Net from which you want to detach the virtual gateway.
          type: string
        VirtualGatewayId:
          description: The ID of the virtual gateway.
          type: string
      required:
      - NetId
      - VirtualGatewayId
      type: object
    UnlinkVirtualGatewayResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UnlinkVolumeRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        ForceUnlink:
          description: 'Forces the detachment of the volume in case of previous failure. Important: This action may damage your data or file systems.'
          type: boolean
        VolumeId:
          description: The ID of the volume you want to detach.
          type: string
      required:
      - VolumeId
      type: object
    UnlinkVolumeResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateFlexibleGpuRequest:
      properties:
        DeleteOnVmDeletion:
          description: If `true`, the fGPU is deleted when the VM is terminated.
          type: boolean
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        FlexibleGpuId:
          description: The ID of the fGPU you want to modify.
          type: string
      required:
      - FlexibleGpuId
      type: object
    UpdateFlexibleGpuResponse:
      properties:
        FlexibleGpu:
          $ref: '#/components/schemas/FlexibleGpu'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateImageRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        ImageId:
          description: The ID of the OMI you want to modify.
          type: string
        PermissionsToLaunch:
          $ref: '#/components/schemas/PermissionsOnResourceCreation'
      required:
      - ImageId
      - PermissionsToLaunch
      type: object
    UpdateImageResponse:
      properties:
        Image:
          $ref: '#/components/schemas/Image'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateLoadBalancerRequest:
      properties:
        AccessLog:
          $ref: '#/components/schemas/AccessLog'
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        HealthCheck:
          $ref: '#/components/schemas/HealthCheck'
        LoadBalancerName:
          description: The name of the load balancer.
          type: string
        LoadBalancerPort:
          description: 'The port on which the load balancer is listening (between `1` and `65535`, both included). '
          type: integer
        PolicyNames:
          description: The list of policies names (must contain all the policies to be enabled).
          items:
            type: string
          type: array
        ServerCertificateId:
          description: The Outscale Resource Name (ORN) of the SSL certificate.
          type: string
      required:
      - LoadBalancerName
      type: object
    UpdateLoadBalancerResponse:
      properties:
        LoadBalancer:
          $ref: '#/components/schemas/LoadBalancer'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateNetAccessPointRequest:
      properties:
        AddRouteTableIds:
          description: One or more IDs of route tables to associate with the specified Net access point.
          items:
            type: string
          type: array
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NetAccessPointId:
          description: The ID of the Net access point.
          type: string
        RemoveRouteTableIds:
          description: One or more IDs of route tables to dissasociate from the specified Net access point.
          items:
            type: string
          type: array
      required:
      - NetAccessPointId
      type: object
    UpdateNetAccessPointResponse:
      properties:
        NetAccessPoint:
          $ref: '#/components/schemas/NetAccessPoint'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateNetRequest:
      properties:
        DhcpOptionsSetId:
          description: The ID of the DHCP options set (or `default` if you want to associate the default one).
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        NetId:
          description: The ID of the Net.
          type: string
      required:
      - DhcpOptionsSetId
      - NetId
      type: object
    UpdateNetResponse:
      properties:
        Net:
          $ref: '#/components/schemas/Net'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateNicRequest:
      properties:
        Description:
          description: A new description for the NIC.
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        LinkNic:
          $ref: '#/components/schemas/LinkNicToUpdate'
        NicId:
          description: The ID of the NIC you want to modify.
          type: string
        SecurityGroupIds:
          description: 'One or more IDs of security groups for the NIC.<br />

            You must specify at least one group, even if you use the default security group in the Net.'
          items:
            type: string
          type: array
      required:
      - NicId
      type: object
    UpdateNicResponse:
      properties:
        Nic:
          $ref: '#/components/schemas/Nic'
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
      type: object
    UpdateRoutePropagationRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        Enable:
          description: If `true`, a virtual gateway can propagate routes to a specified route table of a Net. If `false`, the propagation is disabled.
          type: boolean
        RouteTableId:
          description: The ID of the route table.
          type: string
        VirtualGatewayId:
          description: The ID of the virtual gateway.
          type: string
      required:
      - Enable
      - RouteTableId
      - VirtualGatewayId
      type: object
    UpdateRoutePropagationResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        RouteTable:
          $ref: '#/components/schemas/RouteTable'
      type: object
    UpdateRouteRequest:
      properties:
        DestinationIpRange:
          description: The IP range used for the destination match, in CIDR notation (for example, 10.0.0.0/24).
          type: string
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        GatewayId:
          description: The ID of an Internet service or virtual gateway attached to your Net.
          type: string
        NatServiceId:
          description: The ID of a NAT service.
          type: string
        NetPeeringId:
          description: The ID of a Net peering connection.
          type: string
        NicId:
          description: The ID of a network interface card (NIC).
          type: string
        RouteTableId:
          description: The ID of the route table.
          type: string
        VmId:
          description: The ID of a NAT VM in your Net.
          type: string
      required:
      - RouteTableId
      - DestinationIpRange
      type: object
    UpdateRouteResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        RouteTable:
          $ref: '#/components/schemas/RouteTable'
      type: object
    UpdateSnapshotRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        PermissionsToCreateVolume:
          $ref: '#/components/schemas/PermissionsOnResourceCreation'
        SnapshotId:
          description: The ID of the snapshot.
          type: string
      required:
      - SnapshotId
      - PermissionsToCreateVolume
      type: object
    UpdateSnapshotResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Snapshot:
          $ref: '#/components/schemas/Snapshot'
      type: object
    UpdateSubnetRequest:
      properties:
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        MapPublicIpOnLaunch:
          description: If `true`, a public IP address is assigned to the network interface cards (NICs) created in the specified Subnet.
          type: boolean
        SubnetId:
          description: The ID of the subnet.
          type: string
      required:
      - SubnetId
      - MapPublicIpOnLaunch
      type: object
    UpdateSubnetResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Subnet:
          $ref: '#/components/schemas/Subnet'
      type: object
    UpdateVmRequest:
      properties:
        BlockDeviceMappings:
          description: 'The block device mapping(s) of the VM. This parameter modifies the `DeleteOnDeletion` attribute for volumes attached to the VM. '
          items:
            $ref: '#/components/schemas/BlockDeviceMappingVmUpdate'
          type: array
        BsuOptimized:
          description: If `true`, the VM is optimized for BSU I/O.
          type: boolean
        DeletionProtection:
          description: If `true`, you cannot terminate the VM using Cockpit, the CLI or the API. If `false`, you can.
          type: boolean
        DryRun:
          description: If `true`, checks whether you have the required permissions to perform the action.
          type: boolean
        IsSourceDestChecked:
          description: (Net only) If `true`, the source/destination check is enabled. If `false`, it is disabled. This value must be `false` for a NAT VM to perform network address translation (NAT) in a Net.
          type: boolean
        KeypairName:
          description: 'The name of the keypair.<br />

            To complete the replacement, manually replace the old public key with the new public key in the ~/.ssh/authorized_keys file located in the VM. Restart the VM to apply the change.'
          type: string
        Performance:
          description: The performance of the VM (`medium` \| `high` \|  `highest`).
          enum:
          - medium
          - high
          - highest
          type: string
        SecurityGroupIds:
          description: One or more IDs of security groups for the VM.
          items:
            type: string
          type: array
        UserData:
          description: The Base64-encoded MIME user data.
          type: string
        VmId:
          description: The ID of the VM.
          type: string
        VmInitiatedShutdownBehavior:
          description: The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
          type: string
        VmType:
          description: "The type of VM. \nFor more information, see [Instance Types](https://wiki.outscale.net/display/EN/Instance+Types)."
          type: string
      required:
      - VmId
      type: object
    UpdateVmResponse:
      properties:
        ResponseContext:
          $ref: '#/components/schemas/ResponseContext'
        Vm:
          $ref: '#/components/schemas/Vm'
      type: object
    VirtualGateway:
      description: Information about the virtual gateway.
      properties:
        ConnectionType:
          description: The type of VPN connection supported by the virtual gateway (only `ipsec.1` is supported).
          type: string
        NetToVirtualGatewayLinks:
          description: The Net to which the virtual gateway is attached.
          items:
            $ref: '#/components/schemas/NetToVirtualGatewayLink'
          type: array
        State:
          description: The state of the virtual gateway (`pending` \| `available` \| `deleting` \| `deleted`).
          type: string
        Tags:
          description: One or more tags associated with the virtual gateway.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        VirtualGatewayId:
          description: The ID of the virtual gateway.
          type: string
      type: object
    Vm:
      description: Information about the VM.
      properties:
        Architecture:
          description: The architecture of the VM (`i386` \| `x86_64`).
          type: string
        BlockDeviceMappings:
          description: The block device mapping of the VM.
          items:
            $ref: '#/components/schemas/BlockDeviceMappingCreated'
          type: array
        BsuOptimized:
          description: If `true`, the VM is optimized for BSU I/O.
          type: boolean
        ClientToken:
          description: The idempotency token provided when launching the VM.
          type: string
        DeletionProtection:
          description: If `true`, you cannot terminate the VM using Cockpit, the CLI or the API. If `false`, you can.
          type: boolean
        Hypervisor:
          description: The hypervisor type of the VMs (`ovm` \| `xen`).
          type: string
        ImageId:
          description: The ID of the OMI used to create the VM.
          type: string
        IsSourceDestChecked:
          description: (Net only) If `true`, the source/destination check is enabled. If `false`, it is disabled. This value must be `false` for a NAT VM to perform network address translation (NAT) in a Net.
          type: boolean
        KeypairName:
          description: The name of the keypair used when launching the VM.
          type: string
        LaunchNumber:
          description: The number for the VM when launching a group of several VMs (for example, 0, 1, 2, and so on).
          type: integer
        NetId:
          description: The ID of the Net in which the VM is running.
          type: string
        Nics:
          description: The network interface cards (NICs) the VMs are attached to.
          items:
            $ref: '#/components/schemas/NicLight'
          type: array
        OsFamily:
          description: Indicates the operating system (OS) of the VM.
          type: string
        Performance:
          description: The performance of the VM (`medium` \| `high` \|  `highest`).
          type: string
        Placement:
          $ref: '#/components/schemas/Placement'
        PrivateDnsName:
          description: The name of the private DNS.
          type: string
        PrivateIp:
          description: The private IP address(es) of the VM.
          type: string
        ProductCodes:
          description: The product code associated with the OMI used to create the VM (`0001` Linux/Unix \| `0002` Windows \| `0004` Linux/Oracle \| `0005` Windows 10).
          items:
            type: string
          type: array
        PublicDnsName:
          description: The name of the public DNS.
          type: string
        PublicIp:
          description: The public IP address of the VM.
          type: string
        ReservationId:
          description: 'The reservation ID of the VM. '
          type: string
        RootDeviceName:
          description: The name of the root device for the VM (for example, /dev/vda1).
          type: string
        RootDeviceType:
          description: The type of root device used by the VM (always `bsu`).
          type: string
        SecurityGroups:
          description: One or more security groups associated with the VM.
          items:
            $ref: '#/components/schemas/SecurityGroupLight'
          type: array
        State:
          description: The state of the VM (`pending` \| `running` \| `shutting-down` \| `terminated` \| `stopping` \| `stopped`).
          type: string
        StateReason:
          description: The reason explaining the current state of the VM.
          type: string
        SubnetId:
          description: The ID of the Subnet for the VM.
          type: string
        Tags:
          description: One or more tags associated with the VM.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        UserData:
          description: The Base64-encoded MIME user data.
          type: string
        VmId:
          description: The ID of the VM.
          type: string
        VmInitiatedShutdownBehavior:
          description: The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `delete`, the VM stops and is deleted.
          type: string
        VmType:
          description: "The type of VM.  \nFor more information, see [Instance Types](https://wiki.outscale.net/display/EN/Instance+Types)."
          type: string
      type: object
    VmState:
      description: Information about the state of the VM.
      properties:
        CurrentState:
          description: The current state of the VM (`InService` \| `OutOfService` \| `Unknown`).
          type: string
        PreviousState:
          description: The previous state of the VM (`InService` \| `OutOfService` \| `Unknown`).
          type: string
        VmId:
          description: The ID of the VM.
          type: string
      type: object
    VmStates:
      description: Information about the states of the VMs.
      properties:
        MaintenanceEvents:
          description: One or more scheduled events associated with the VM.
          items:
            $ref: '#/components/schemas/MaintenanceEvent'
          type: array
        SubregionName:
          description: The name of the Subregion of the VM.
          type: string
        VmId:
          description: The ID of the VM.
          type: string
        VmState:
          description: The state of the VM (`pending` \| `running` \| `shutting-down` \| `terminated` \| `stopping` \| `stopped`).
          type: string
      type: object
    VmType:
      description: Information about the VM type.
      properties:
        BsuOptimized:
          description: Indicates whether the VM is optimized for BSU I/O.
          type: boolean
        MaxPrivateIps:
          description: The maximum number of private IP addresses per network interface card (NIC).
          type: integer
        MemorySize:
          description: The amount of memory, in gibibytes.
          format: float
          type: number
        VcoreCount:
          description: The number of vCores.
          type: integer
        VmTypeName:
          description: The name of the VM type.
          type: string
        VolumeCount:
          description: The maximum number of ephemeral storage disks.
          type: integer
        VolumeSize:
          description: The size of one ephemeral storage disk, in gibibytes (GiB).
          type: integer
      type: object
    Volume:
      description: Information about the volume.
      properties:
        Iops:
          description: 'The number of I/O operations per second (IOPS):<br />

            - For `io1` volumes, the number of provisioned IOPS<br />

            - For `gp2` volumes, the baseline performance of the volume'
          type: integer
        LinkedVolumes:
          description: Information about your volume attachment.
          items:
            $ref: '#/components/schemas/LinkedVolume'
          type: array
        Size:
          description: The size of the volume, in gibibytes (GiB).
          type: integer
        SnapshotId:
          description: The snapshot from which the volume was created.
          type: string
        State:
          description: The state of the volume (`creating` \| `available` \| `in-use` \| `deleting` \| `error`).
          type: string
        SubregionName:
          description: The Subregion in which the volume was created.
          type: string
        Tags:
          description: One or more tags associated with the volume.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        VolumeId:
          description: The ID of the volume.
          type: string
        VolumeType:
          description: The type of the volume (`standard` \| `gp2` \| `io1`).
          type: string
      type: object
    VpnConnection:
      description: Information about a VPN connection.
      properties:
        ClientGatewayConfiguration:
          description: The configuration to apply to the client gateway to establish the VPN connection, in XML format.
          type: string
        ClientGatewayId:
          description: The ID of the client gateway used on the client end of the connection.
          type: string
        ConnectionType:
          description: The type of VPN connection (always `ipsec.1`).
          type: string
        Routes:
          description: Information about one or more static routes associated with the VPN connection, if any.
          items:
            $ref: '#/components/schemas/RouteLight'
          type: array
        State:
          description: The state of the VPN connection (`pending` \| `available` \| `deleting` \| `deleted`).
          type: string
        StaticRoutesOnly:
          description: If `false`, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If `true`, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](#createvpnconnectionroute) and [DeleteVpnConnectionRoute](#deletevpnconnectionroute).
          type: boolean
        Tags:
          description: One or more tags associated with the VPN connection.
          items:
            $ref: '#/components/schemas/ResourceTag'
          type: array
        VirtualGatewayId:
          description: The ID of the virtual gateway used on the 3DS OUTSCALE end of the connection.
          type: string
        VpnConnectionId:
          description: The ID of the VPN connection.
          type: string
      type: object
    With:
      description: The information to be displayed in the API logs to retrieve.
      properties:
        AccountId:
          description: If set to `true`, the account ID is displayed in the logs.
          type: boolean
        CallDuration:
          description: If set to `true`, the duration of the call is displayed each log.
          type: boolean
        QueryAccessKey:
          description: If set to `true`, the API key used for the query is displayed each log.
          type: boolean
        QueryApiName:
          description: If set to `true`, the name of the API service used by the call is displayed in each log (`oapi` \| `fcu` \| `lbu` \| `directlink` \| `eim` \| `icu`).
          type: boolean
        QueryApiVersion:
          description: If set to `true`, the version of the API service used by the call is displayed in each log.
          type: boolean
        QueryCallName:
          description: If set to `true`, the name of the call is displayed in each log.
          type: boolean
        QueryDate:
          description: If set to `true`, the date of the call is displayed in each log.
          type: boolean
        QueryHeaderRaw:
          description: If set to `true`, the query header RAW is displayed in each log.
          type: boolean
        QueryHeaderSize:
          description: If set to `true`, the query header size is displayed in each log.
          type: boolean
        QueryIpAddress:
          description: If set to `true`, the IP address used to make to query is displayed in each log.
          type: boolean
        QueryPayloadRaw:
          description: If set to `true`, the query payload raw is displayed in each log.
          type: boolean
        QueryPayloadSize:
          description: If set to `true`, the query payload size is displayed in each log.
          type: boolean
        QueryUserAgent:
          description: If set to `true`, the user agent used to make the HTTP request is displayed in each log.
          type: boolean
        RequestId:
          description: By default ot if set to `true`, the ID of the call is displayed in each log.
          type: boolean
        ResponseSize:
          description: If set to `true`, the size of the response (in bytes) is displayed in each log.
          type: boolean
        ResponseStatusCode:
          description: If set to `true`, the HTTP code provided by the response is displayed in each log.
          type: boolean
      type: object
  securitySchemes:
    ApiKeyAuth:
      description: Signatures of API Requests based on the Hash-based Message Authentication Code (HMAC) protocol, [more information](https://wiki.outscale.net/display/EN/About+Signatures+of+API+Requests).
      in: header
      name: Authorization
      type: apiKey
info:
  contact:
    email: support@outscale.com
  description: 'Welcome to the 3DS OUTSCALE''s API documentation.<br /><br />

    The 3DS OUTSCALE API enables you to manage your resources in the 3DS OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />

    Note that the 3DS OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the 3DS OUTSCALE API. You can find a list of the differences [here](https://wiki.outscale.net/display/EN/3DS+OUTSCALE+APIs+Reference).<br /><br />

    You can also manage your resources using the [Cockpit](https://wiki.outscale.net/display/EN/About+Cockpit) web interface.'
  license:
    name: BSD 3 Clause
    url: https://opensource.org/licenses/BSD-3-Clause
  termsOfService: https://en.outscale.com/terms-of-service/
  title: 3DS OUTSCALE API
  version: '0.13'
openapi: 3.0.0
paths:
  /AcceptNetPeering:
    description: 'Accepts a Net peering connection request.<br />

      To accept this request, you must be the owner of the peer Net. If you do not accept the request within 7 days, the state of the Net peering connection becomes `expired`.'
    post:
      operationId: AcceptNetPeering
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptNetPeeringRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptNetPeeringResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 409 response (Conflict).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - NetPeering
  /CreateClientGateway:
    description: 'Provides information about your client gateway.<br />

      This action registers information to identify the client gateway that you deployed in your network.<br />

      To open a tunnel to the client gateway, you must at least provide the communication protocol type, the valid fixed public IP address of the gateway, and an Autonomous System Number (ASN).<br />

      If you do not have any ASN assigned to your network, you may use a private ASN within the [64000; 64495] or [4200000000; 4294967294] ranges. By default, you can use 65000 as BGP ASN.'
    post:
      operationId: CreateClientGateway
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientGatewayRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateClientGatewayResponse'
          description: The HTTP 200 response (OK).
      tags:
      - ClientGateway
  /CreateDhcpOptions:
    description: Creates a new set of DHCP options that you can then associate with a Net.
    post:
      operationId: CreateDhcpOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDhcpOptionsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDhcpOptionsResponse'
          description: The HTTP 200 response (OK).
      tags:
      - DhcpOption
  /CreateDirectLink:
    description: Creates a new DirectLink between a customer network and a specified DirectLink location.
    post:
      operationId: CreateDirectLink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDirectLinkRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDirectLinkResponse'
          description: The HTTP 200 response (OK).
      tags:
      - DirectLink
  /CreateDirectLinkInterface:
    description: 'Creates a DirectLink interface.<br />

      DirectLink interfaces enable you to reach one of your Nets through a virtual gateway.'
    post:
      operationId: CreateDirectLinkInterface
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDirectLinkInterfaceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDirectLinkInterfaceResponse'
          description: The HTTP 200 response (OK).
      tags:
      - DirectLinkInterface
  /CreateFlexibleGpu:
    description: 'Allocates a flexible GPU (fGPU) to your account.<br />

      You can then attach this fGPU to a virtual machine (VM).<br />'
    post:
      operationId: CreateFlexibleGpu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFlexibleGpuRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFlexibleGpuResponse'
          description: The HTTP 200 response (OK).
      tags:
      - FlexibleGpu
  /CreateImage:
    description: 'Creates an Outscale machine image (OMI) from an existing virtual machine (VM) which is either running or stopped.<br />

      This action also creates a snapshot of the root volume of the VM, as well as a snapshot of each Block Storage Unit (BSU) volume attached to the VM.<br /><br />

      You can also use this method to copy an OMI to your account, from an account in the same Region. To do so, the owner of the source OMI must share it with your account. For more information about how to share an OMI with another account in the same Region, see [UpdateImage](#updateimage).<br />

      To copy an OMI between accounts in different Regions, the owner of the source OMI must first export it to an Object Storage Unit (OSU) bucket using the [CreateImageExportTask](#createimageexporttask) method, and then you need to create a copy of the image in your account.<br />

      The copy of the source OMI is independent and belongs to you.<br /><br />

      You can also use this method to register an OMI to finalize its creation process.<br />

      You can register an OMI from a snapshot of a root device to create an OMI based on this snapshot. You can also register an OMI that has been exported to an OSU bucket to create a copy of it in your account. For more information about OMI export to an OSU bucket, see [CreateImageExportTask](#createimageexporttask).<br />

      You can register an OMI using a pre-signed URL of the manifest file of the OMI. You do not need any permission for this OMI, or the bucket in which it is contained. The manifest file is obsolete seven days after a completed export as it contains pre-signed URLs to the appropriate snapshots (pre-signed URLs are valid for only seven days).<br />

      Once the OMI is registered, you can launch a VM from this OMI. The copy of the source OMI is independent and belongs to you.'
    post:
      operationId: CreateImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateImageRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateImageResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Image
  /CreateImageExportTask:
    description: "Exports an Outscale machine image (OMI) to an Object Storage Unit (OSU) bucket.<br />      \nThis action enables you to copy an OMI between accounts in different Regions. To copy an OMI in the same Region, you can also use the [CreateImage](#createimage) method.<br />\nThe copy of the OMI belongs to you and is independent from the source OMI.<br /><br />\n**[NOTE]**<br />\nYou cannot export a shared or public OMI, as they do not belong to you. To do so, you must first copy it to your account. The copy then belongs to you and you can export it.\n"
    post:
      operationId: CreateImageExportTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateImageExportTaskRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateImageExportTaskResponse'
          description: The HTTP 200 response (OK).
      tags:
      - Image
  /CreateInternetService:
    description: 'Creates an Internet service you can use with a Net.<br />

      An Internet service enables your virtual machines (VMs) launched in a Net to connect to the Internet. By default, a Net includes an Internet service, and each Subnet is public. Every VM launched within a default Subnet has a private and a public IP addresses.'
    post:
      operationId: CreateInternetService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInternetServiceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateInternetServiceResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - InternetService
  /CreateKeypair:
    description: 'Creates a 2048-bit RSA keypair with a specified name.<br />

      This action returns the private key that you need to save. The public key is stored by 3DS OUTSCALE.<br /><br />

      You can also use this method to import a provided public key and create a keypair.<br />

      This action imports the public key of a keypair created by a third-party tool and uses it to create a new keypair. The private key is never provided to 3DS OUTSCALE.  '
    post:
      operationId: CreateKeypair
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKeypairRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateKeypairResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 409 response (Conflict).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Keypair
  /CreateLoadBalancer:
    description: 'Creates a load balancer.<br />

      The load balancer is created with a unique Domain Name Service (DNS) name. It receives the incoming traffic and routes it to its registered virtual machines (VMs).<br />

      By default, this action creates an Internet-facing load balancer, resolving to public IP addresses. To create an internal load balancer in a Net, resolving to private IP addresses, use the `LoadBalancerType` parameter.'
    post:
      operationId: CreateLoadBalancer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoadBalancerRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLoadBalancerResponse'
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /CreateLoadBalancerListeners:
    description: Creates one or more listeners for a specified load balancer.
    post:
      operationId: CreateLoadBalancerListeners
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoadBalancerListenersRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLoadBalancerListenersResponse'
          description: The HTTP 200 response (OK).
      tags:
      - Listener
  /CreateLoadBalancerPolicy:
    description: 'Creates a stickiness policy with sticky session lifetimes defined by the browser lifetime.<br />

      The created policy can be used with HTTP or HTTPS listeners only.<br />

      If this policy is implemented by a load balancer, this load balancer uses this cookie in all incoming requests to direct them to the specified back-end server virtual machine (VM). If this cookie is not present, the load balancer sends the request to any other server according to its load-balancing algorithm.<br /><br />

      You can also create a stickiness policy with sticky session lifetimes following the lifetime of an application-generated cookie.<br />

      Unlike the other type of stickiness policy, the lifetime of the special Load Balancer Unit (LBU) cookie follows the lifetime of the application-generated cookie specified in the policy configuration. The load balancer inserts a new stickiness cookie only when the application response includes a new application cookie.<br />

      The session stops being sticky if the application cookie is removed or expires, until a new application cookie is issued.  '
    post:
      operationId: CreateLoadBalancerPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoadBalancerPolicyRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLoadBalancerPolicyResponse'
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancerPolicy
  /CreateNatService:
    description: 'Creates a network address translation (NAT) service in the specified public Subnet of a Net.<br />

      A NAT service enables virtual machines (VMs) placed in the private Subnet of this Net to connect to the Internet, without being accessible from the Internet.<br />

      When creating a NAT service, you specify the allocation ID of the External IP (EIP) you want to use as public IP for the NAT service. Once the NAT service is created, you need to create a route in the route table of the private Subnet, with 0.0.0.0/0 as destination and the ID of the NAT service as target. For more information, see [LinkPublicIP](#linkpublicip) and [CreateRoute](#createroute).<br />

      This action also enables you to create multiple NAT services in the same Net (one per public Subnet).<br /><br />

      **[NOTE]**<br />

      You cannot modify the EIP associated with a NAT service after its creation. To do so, you need to delete the NAT service and create a new one with another EIP.


      '
    post:
      operationId: CreateNatService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNatServiceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNatServiceResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - NatService
  /CreateNet:
    description: "Creates a Net with a specified IP range.<br />  \nThe IP range (network range) of your Net must be between a /28 netmask (16 IP addresses) and a /16 netmask (65 536 IP addresses)."
    post:
      operationId: CreateNet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNetRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNetResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 409 response (Conflict).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Net
  /CreateNetAccessPoint:
    description: 'Creates a Net access point to access a 3DS OUTSCALE service from this Net without using the Internet and External IP addresses.<br />

      You specify the service using its prefix list name. For more information, see [DescribePrefixLists](#describeprefixlists)<br />

      To control the routing of traffic between the Net and the specified service, you can specify one or more route tables. Virtual machines placed in Subnets associated with the specified route table thus use the Net access point to access the service. When you specify a route table, a route is automatically added to it with the destination set to the prefix list ID of the service, and the target set to the ID of the access point.'
    post:
      operationId: CreateNetAccessPoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNetAccessPointRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNetAccessPointResponse'
          description: The HTTP 200 response (OK).
      tags:
      - NetAccessPoint
  /CreateNetPeering:
    description: 'Requests a Net peering connection between a Net you own and a peer Net that belongs to you or another account.<br />

      This action creates a Net peering connection that remains in the `pending-acceptance` state until it is accepted by the owner of the peer Net. If the owner of the peer Net does not accept the request within 7 days, the state of the Net peering connection becomes `expired`. For more information, see [AcceptNetPeering](#acceptnetpeering).<br /><br />

      **[NOTE]**<br />

      The two Nets must not have overlapping CIDR blocks. Otherwise, the Net peering connection is in the `failed` state.

      '
    post:
      operationId: CreateNetPeering
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNetPeeringRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNetPeeringResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - NetPeering
  /CreateNic:
    description: Creates a network interface card (NIC) in the specified subnet.
    post:
      operationId: CreateNic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNicRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNicResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Nic
  /CreatePublicIp:
    description: 'Acquires an External IP address (EIP) for your account.<br />

      An EIP is a static IP address designed for dynamic Cloud computing. It can be used for virtual machines (VMs) in the public Cloud (`standard`) or in a Net, for a network interface card (NIC), or for a NAT service.'
    post:
      operationId: CreatePublicIp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePublicIpRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePublicIpResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - PublicIp
  /CreateRoute:
    description: "Creates a route in a specified route table within a specified Net.<br />\nYou must specify one of the following elements as the target:<br /><br />     \n* Net peering connection<br />\n* NAT VM<br />\n* Internet service<br />\n* Virtual gateway<br />\n* NAT service<br />\n* Network interface card (NIC)<br /><br />\nThe routing algorithm is based on the most specific match."
    post:
      operationId: CreateRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRouteResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Route
  /CreateRouteTable:
    description: 'Creates a route table for a specified Net.<br />

      You can then add routes and associate this route table with a Subnet.'
    post:
      operationId: CreateRouteTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteTableRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRouteTableResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - RouteTable
  /CreateSecurityGroup:
    description: "Creates a security group.<br />\nThis action creates a security group either in the public Cloud or in a specified Net. By default, a default security group for use in the public Cloud and a default security group for use in a Net are created.<br />\nWhen launching a virtual machine (VM), if no security group is explicitly specified, the appropriate default security group is assigned to the VM. Default security groups include a default rule granting VMs network access to each other.<br />\nWhen creating a security group, you specify a name. Two security groups for use in the public Cloud or for use in a Net cannot have the same name.<br />\nYou can have up to 500 security groups in the public Cloud. You can create up to 500 security groups per Net.<br />\n To add or remove rules, use the [CreateSecurityGroupRule](#createsecuritygrouprule) method."
    post:
      operationId: CreateSecurityGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSecurityGroupRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSecurityGroupResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - SecurityGroup
  /CreateSecurityGroupRule:
    description: "Configures the rules for a security group.<br />\nThe modifications are effective at virtual machine (VM) level as quickly as possible, but a small delay may occur.<br /><br />\nYou can add one or more egress rules to a security group for use with a Net.<br />\nIt allows VMs to send traffic to either one or more destination IP address ranges or destination security groups for the same Net.<br />\nWe recommend using a set of IP permissions to authorize outbound access to a destination security group. We also recommended this method to create a rule with a specific IP protocol and a specific port range.  In a set of IP permissions, we recommend to specify the the protocol.<br /><br />\nYou can also add one or more ingress rules to a security group.<br />\nIn the public Cloud, this action allows one or more IP address ranges to access a security group for your account, or allows one or more security groups (source groups) to access a security group for your own 3DS OUTSCALE\
      \ account or another one.<br />\nIn a Net, this action allows one or more  IP address ranges to access a security group for your Net, or allows one or more other security groups (source groups) to access a security group for your Net. All the security groups must be for the same Net.<br /><br />\n**[NOTE]**<br />           \nBy default, traffic between two security groups is allowed through both public and private IP addresses. To restrict it to private IP addresses only, contact our Support team: support@outscale.com."
    post:
      operationId: CreateSecurityGroupRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSecurityGroupRuleRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSecurityGroupRuleResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - SecurityGroupRule
  /CreateSnapshot:
    description: 'Creates a snapshot of a Block storage Unit (BSU) volume.<br />

      Snapshots are point-in-time images of a volume you can use to back up your data or to create replicas of this volume at the time the snapshot was created.<br /><br />

      You can also use this method to copy a snapshot to your account, from an account in the same Region.<br />

      To do so, the owner of the source snapshot must share it with your account. For more information about how to share a snapshot with another account, see [UpdateSnapshot](#updatesnapshot).<br />

      The copy of the source snapshot is independent and belongs to you.<br /><br />

      To copy a snapshot between accounts in different Regions, the owner of the source snapshot must export it to an Object Storage Unit (OSU) bucket using the [CreateSnapshotExportTask](#createsnapshotexporttask) method. You then need to import it from the OSU bucket to create a copy of this snapshot in your account.<br />

      You can import a snapshot using a pre-signed URL. You do not need any permission for this snapshot, or the bucket in which it is contained. The pre-signed URL is valid for seven days (you can regenerate a new one if needed).'
    post:
      operationId: CreateSnapshot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSnapshotRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSnapshotResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Snapshot
  /CreateSnapshotExportTask:
    description: 'Exports a snapshot to an Object Storage Unit (OSU) bucket.<br />

      This action enables you to create a backup of your snapshot or to copy it to another account. You, or other users you send a pre-signed URL to, can then download this snapshot from the OSU bucket using the [CreateSnapshot](#createsnapshot) method.<br />

      This procedure enables you to copy a snapshot between accounts within the same Region or in different Regions. To copy a snapshot within the same Region, you can also use the [CreateSnapshot](#createsnapshot) direct method.

      The copy of the source snapshot is independent and belongs to you.'
    post:
      operationId: CreateSnapshotExportTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSnapshotExportTaskRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSnapshotExportTaskResponse'
          description: The HTTP 200 response (OK).
      tags:
      - Snapshot
  /CreateSubnet:
    description: 'Creates a Subnet in an existing Net.<br />

      To create a Subnet in a Net, you have to provide the ID of the Net and the IP range for the Subnet (its network range). Once the Subnet is created, you cannot modify its IP range.<br />

      The IP range of the Subnet can be either the same as the Net one if you create only a single Subnet in this Net, or a subset of the Net one. In case of several Subnets in a Net, their IP ranges must not overlap. The smallest Subnet you can create uses a /30 netmask (four IP addresses).'
    post:
      operationId: CreateSubnet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubnetRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSubnetResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 409 response (Conflict).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Subnet
  /CreateTags:
    description: 'Adds one or more tags to the specified resources.<br />

      If a tag with the same key already exists for the resource, the tag value is replaced.<br />

      You can tag the following resources using their IDs:<br /><br />

      * Virtual machines (VMs) (i-xxxxxxxx)<br />

      * OMIs (ami-xxxxxxxx)<br />

      * Volumes (vol-xxxxxxxx)<br />

      * Snapshots (snap-xxxxxxxx)<br />

      * EIPs (eipalloc-xxxxxxxx)<br />

      * Security groups (sg-xxxxxxxx)<br />

      * Route tables (rtb-xxxxxxxx)<br />

      * Network interface cards (NIC) (eni-xxxxxxxx)<br />

      * Nets (vpc-xxxxxxxx)<br />

      * Subnets (subnet-xxxxxxxx)<br />

      * Net peering connections (vpcx-xxxxxxxx)<br />

      * Net endpoints (vpce-xxxxxxxx)<br />

      * NAT services (nat-xxxxxxxx)<br />

      * Internet services (igw-xxxxxxxx)<br />

      * Client gateways (cgw-xxxxxxxx)<br />

      * Virtual gateways (vgw-xxxxxxxx)<br />

      * VPN connections (vpn-xxxxxxxx)<br />

      * DHCP options (dopt-xxxxxxxx)<br />

      * OMI export tasks (image-export-xxxxxxxx)<br />

      * Snapshot export tasks (snap-export-xxxxxxxx)<br /> '
    post:
      operationId: CreateTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTagsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTagsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Tag
  /CreateVirtualGateway:
    description: 'Creates a virtual gateway.<br />

      A virtual gateway is the access point on the Net side of a VPN connection.'
    post:
      operationId: CreateVirtualGateway
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVirtualGatewayRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualGatewayResponse'
          description: The HTTP 200 response (OK).
      tags:
      - VirtualGateway
  /CreateVms:
    description: 'Creates new virtual machines (VMs), and then launches them.<br />

      This action enables you to create a specified number of VMs using an Outscale machine image (OMI) that you are allowed to use, and then to automatically launch them.<br />

      The VMs remain in the `pending` state until they are created and ready to be used. Once automatically launched, they are in the `running` state.<br />

      To check the state of your VMs, call the [ReadVms](#readvms) method.<br />

      If not specified, the security group used by the service is the default one.<br />

      The metadata server enables you to get the public key provided when the VM is launched. Official OMIs contain a script to get this public key and put it inside the VM to provide secure access without password.'
    post:
      operationId: CreateVms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVmsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVmsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /CreateVolume:
    description: 'Creates a Block Storage Unit (BSU) volume in a specified Region.<br />

      BSU volumes can be attached to a virtual machine (VM) in the same Subregion. You can create a new empty volume or restore a volume from an existing snapshot.<br />

      You can create the following volume types: Enterprise (`io1`) for provisioned IOPS SSD volumes, Performance (`gp2`) for general purpose SSD volumes, or Magnetic (`standard`) volumes.'
    post:
      operationId: CreateVolume
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVolumeRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVolumeResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Volume
  /CreateVpnConnection:
    description: 'Creates a VPN connection between a specified virtual gateway and a specified client gateway.<br />

      You can create only one VPN connection between a virtual gateway and a client gateway.'
    post:
      operationId: CreateVpnConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVpnConnectionRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVpnConnectionResponse'
          description: The HTTP 200 response (OK).
      tags:
      - VpnConnection
  /CreateVpnConnectionRoute:
    description: 'Creates a static route to a VPN connection.<br />

      This enables you to select the network flows sent by the virtual gateway to the target VPN connection.'
    post:
      operationId: CreateVpnConnectionRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVpnConnectionRouteRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVpnConnectionRouteResponse'
          description: The HTTP 200 response (OK).
      tags:
      - VpnConnection
  /DeleteClientGateway:
    description: 'Deletes a client gateway.<br />

      You must delete the VPN connection before deleting the client gateway.'
    post:
      operationId: DeleteClientGateway
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteClientGatewayRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteClientGatewayResponse'
          description: The HTTP 200 response (OK).
      tags:
      - ClientGateway
  /DeleteDhcpOptions:
    description: 'Deletes a specified DHCP options set.<br />

      Before deleting a DHCP options set, you must disassociate it from the Nets you associated it with. To do so, you need to associate with each Net a new set of DHCP options, or the `default` one if you do not want to associate any DHCP options with the Net.<br /><br />

      **[NOTE]**<br />

      You cannot delete the `default` set.


      '
    post:
      operationId: DeleteDhcpOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDhcpOptionsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDhcpOptionsResponse'
          description: The HTTP 200 response (OK).
      tags:
      - DhcpOption
  /DeleteDirectLink:
    description: 'Deletes a specified DirectLink.<br />

      Before deleting a DirectLink, ensure that all your DirectLink interfaces related to this DirectLink are deleted.'
    post:
      operationId: DeleteDirectLink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDirectLinkRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDirectLinkResponse'
          description: The HTTP 200 response (OK).
      tags:
      - DirectLink
  /DeleteDirectLinkInterface:
    description: Deletes a specified DirectLink interface.
    post:
      operationId: DeleteDirectLinkInterface
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDirectLinkInterfaceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDirectLinkInterfaceResponse'
          description: The HTTP 200 response (OK).
      tags:
      - DirectLinkInterface
  /DeleteExportTask:
    description: 'Deletes an export task.<br />

      If the export task is not running, the command fails and an error is returned.'
    post:
      operationId: DeleteExportTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteExportTaskRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteExportTaskResponse'
          description: The HTTP 200 response (OK).
      tags:
      - Task
  /DeleteFlexibleGpu:
    description: 'Releases a flexible GPU (fGPU) from your account.<br />

      The fGPU becomes free to be used by someone else.'
    post:
      operationId: DeleteFlexibleGpu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFlexibleGpuRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFlexibleGpuResponse'
          description: The HTTP 200 response (OK).
      tags:
      - FlexibleGpu
  /DeleteImage:
    description: 'Deletes an Outscale machine image (OMI) so that you cannot use it anymore to launch virtual machines (VMs). However, you can still use VMs already launched from this OMI. '
    post:
      operationId: DeleteImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteImageRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteImageResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Image
  /DeleteInternetService:
    description: 'Deletes an Internet service.<br />

      Before deleting an Internet service, you must detach it from any Net it is attached to. '
    post:
      operationId: DeleteInternetService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteInternetServiceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteInternetServiceResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - InternetService
  /DeleteKeypair:
    description: 'Deletes the specified keypair.<br />

      This action deletes the public key stored by 3DS OUTSCALE, thus deleting the keypair.'
    post:
      operationId: DeleteKeypair
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteKeypairRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteKeypairResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Keypair
  /DeleteLoadBalancer:
    description: Deletes a specified load balancer.
    post:
      operationId: DeleteLoadBalancer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLoadBalancerRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLoadBalancerResponse'
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /DeleteLoadBalancerListeners:
    description: Deletes listeners of a specified load balancer.
    post:
      operationId: DeleteLoadBalancerListeners
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLoadBalancerListenersRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLoadBalancerListenersResponse'
          description: The HTTP 200 response (OK).
      tags:
      - Listener
  /DeleteLoadBalancerPolicy:
    description: 'Deletes a specified policy from a load balancer.<br />

      In order to be deleted, the policy must not be enabled for any listener. '
    post:
      operationId: DeleteLoadBalancerPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLoadBalancerPolicyRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLoadBalancerPolicyResponse'
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancerPolicy
  /DeleteNatService:
    description: 'Deletes a specified network address translation (NAT) service.<br />

      This action disassociates the External IP address (EIP) from the NAT service, but does not release this EIP from your account. However, it does not delete any NAT service routes in your route tables.'
    post:
      operationId: DeleteNatService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteNatServiceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNatServiceResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - NatService
  /DeleteNet:
    description: 'Deletes a specified Net.<br />

      Before deleting the Net, you need to delete or detach all the resources associated with the Net:<br /><br />

      * Virtual machines (VMs)<br />

      * Net peering connections<br />

      * Custom route tables<br />

      * External IP addresses (EIPs) allocated to resources in the Net<br />

      * Network Interface Cards (NICs) created in the Subnets<br />

      * Virtual gateways, Internet services and NAT services<br />

      * Load balancers<br />

      * Security groups<br />

      * Subnets   '
    post:
      operationId: DeleteNet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteNetRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNetResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Net
  /DeleteNetAccessPoint:
    description: 'Deletes one or more Net access point.<br />

      This action also deletes the corresponding routes added to the route tables you specified for the Net access point.'
    post:
      operationId: DeleteNetAccessPoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteNetAccessPointRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNetAccessPointResponse'
          description: The HTTP 200 response (OK).
      tags:
      - NetAccessPoint
  /DeleteNetPeering:
    description: 'Deletes a Net peering connection.<br />

      If the Net peering connection is in the `active` state, it can be deleted either by the owner of the requester Net or the owner of the peer Net.<br />

      If it is in the `pending-acceptance` state, it can be deleted only by the owner of the requester Net.<br />

      If it is in the `rejected`, `failed`, or `expired` states, it cannot be deleted.  '
    post:
      operationId: DeleteNetPeering
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteNetPeeringRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNetPeeringResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 409 response (Conflict).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - NetPeering
  /DeleteNic:
    description: 'Deletes the specified network interface card (NIC).<br />

      The network interface must not be attached to any virtual machine (VM).'
    post:
      operationId: DeleteNic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteNicRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNicResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Nic
  /DeletePublicIp:
    description: 'Releases an External IP address (EIP).<br />

      You can release an EIP associated with your account. This address is released in the EIP pool and can be used by someone else. Before releasing an EIP, ensure you updated all your resources communicating with this address.'
    post:
      operationId: DeletePublicIp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePublicIpRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePublicIpResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - PublicIp
  /DeleteRoute:
    description: Deletes a route from a specified route table.
    post:
      operationId: DeleteRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRouteRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRouteResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Route
  /DeleteRouteTable:
    description: 'Deletes a specified route table.<br />

      Before deleting a route table, you must disassociate it from any Subnet. You cannot delete the main route table.'
    post:
      operationId: DeleteRouteTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRouteTableRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRouteTableResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - RouteTable
  /DeleteSecurityGroup:
    description: 'Deletes a specified security group.<br />

      You can specify either the name of the security group or its ID.<br />

      This action fails if the specified group is associated with a virtual machine (VM) or referenced by another security group.'
    post:
      operationId: DeleteSecurityGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSecurityGroupRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSecurityGroupResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - SecurityGroup
  /DeleteSecurityGroupRule:
    description: 'Deletes one or more inbound or outbound rules from a security group. For the rule to be deleted, the values specified in the deletion request must exactly match the value of the existing rule.<br />

      In case of TCP and UDP protocols, you have to indicate the destination port or range of ports. In case of ICMP protocol, you have to specify the ICMP type and code.<br />

      Rules (IP permissions) consist of the protocol, IP address range or source security group.<br />

      To remove outbound access to a destination security group, we recommend to use a set of IP permissions. We also recommend to specify the protocol in a set of IP permissions.'
    post:
      operationId: DeleteSecurityGroupRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSecurityGroupRuleRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSecurityGroupRuleResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - SecurityGroupRule
  /DeleteSnapshot:
    description: 'Deletes a specified snapshot.<br />

      You cannot delete a snapshot that is currently used by an Outscale machine image (OMI). To do so, you first need to delete the corresponding OMI. For more information, see the [DeleteImage](#deleteimage) method.'
    post:
      operationId: DeleteSnapshot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSnapshotRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSnapshotResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Snapshot
  /DeleteSubnet:
    description: 'Deletes a specified Subnet.<br />

      You must terminate all the running virtual machines (VMs) in the Subnet before deleting it.'
    post:
      operationId: DeleteSubnet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSubnetRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSubnetResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Subnet
  /DeleteTags:
    description: Deletes one or more tags from the specified resources.
    post:
      operationId: DeleteTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTagsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTagsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Tag
  /DeleteVirtualGateway:
    description: 'Deletes a specified virtual gateway.<br />

      Before deleting a virtual gateway, we recommend to detach it from the Net and delete the VPN connection.'
    post:
      operationId: DeleteVirtualGateway
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteVirtualGatewayRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualGatewayResponse'
          description: The HTTP 200 response (OK).
      tags:
      - VirtualGateway
  /DeleteVms:
    description: 'Performs a shut down for at least one virtual machine (VM).<br />

      This operation is idempotent, that means that all calls succeed if you terminate a VM more than one time. '
    post:
      operationId: DeleteVms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteVmsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVmsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /DeleteVolume:
    description: 'Deletes a specified Block Storage Unit (BSU) volume.<br />

      You can delete available volumes only, that is, volumes that are not attached to a virtual machine (VM).'
    post:
      operationId: DeleteVolume
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteVolumeRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVolumeResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Volume
  /DeleteVpnConnection:
    description: 'Deletes a specified VPN connection.<br />

      If you want to delete a Net and all its dependencies, we recommand to detach the virtual gateway from the Net and delete the Net before deleting the VPN connection. This enables you to delete the Net without waiting for the VPN connection to be deleted.'
    post:
      operationId: DeleteVpnConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteVpnConnectionRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVpnConnectionResponse'
          description: The HTTP 200 response (OK).
      tags:
      - VpnConnection
  /DeleteVpnConnectionRoute:
    description: Deletes a static route to a VPN connection previously created using the CreateVpnConnectionRoute method.
    post:
      operationId: DeleteVpnConnectionRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteVpnConnectionRouteRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVpnConnectionRouteResponse'
          description: The HTTP 200 response (OK).
      tags:
      - VpnConnection
  /DeregisterVmsInLoadBalancer:
    description: 'Deregisters a specified virtual machine (VM) from a load balancer. '
    post:
      operationId: DeregisterVmsInLoadBalancer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeregisterVmsInLoadBalancerRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeregisterVmsInLoadBalancerResponse'
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /LinkFlexibleGpu:
    description: 'Attaches one of your allocated flexible GPUs (fGPUs) to one of your virtual machines (VMs).<br />

      The fGPU is in the `attaching` state until the VM is stopped, after which it becomes `attached`.'
    post:
      operationId: LinkFlexibleGpu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkFlexibleGpuRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkFlexibleGpuResponse'
          description: The HTTP 200 response (OK).
      tags:
      - FlexibleGpu
  /LinkInternetService:
    description: 'Attaches an Internet service to a Net.<br />

      To enable the connection between the Internet and a Net, you must attach an Internet service to this Net.'
    post:
      operationId: LinkInternetService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkInternetServiceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkInternetServiceResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - InternetService
  /LinkNic:
    description: 'Attaches a network interface card (NIC) to a virtual machine (VM).<br />

      The interface and the VM must be in the same Subregion. The VM can be either `running` or `stopped`. The NIC must be in the `available` state.'
    post:
      operationId: LinkNic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkNicRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkNicResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Nic
  /LinkPrivateIps:
    description: 'Assigns one or more secondary private IP addresses to a specified network interface card (NIC).

      This action is only available in a Net.

      The private IP addresses to be assigned can be added individually using the `PrivateIps` parameter, or you can specify the number of private IP addresses to be automatically chosen within the Subnet range using the `SecondaryPrivateIpCount` parameter. You can specify only one of these two parameters. If none of these parameters are specified, a private IP address is chosen within the Subnet range.'
    post:
      operationId: LinkPrivateIps
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkPrivateIpsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkPrivateIpsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Nic
  /LinkPublicIp:
    description: "Associates an External IP address (EIP) with a virtual machine (VM) or a network interface card (NIC), in the public Cloud or in a Net. You can associate an EIP with only one VM or network interface at a time.<br />          \nTo associate an EIP in a Net, ensure that the Net has an Internet service attached. For more information, see the [LinkInternetService](#linkinternetservice) method.<br />\nBy default, the EIP is disassociated every time you stop and start the VM. For a persistent association, you can add the `osc.fcu.eip.auto-attach` tag to the VM with the EIP as value. For more information, see the [CreateTags](#createtags) method.<br /><br />\n**[NOTE]**<br />       \nYou can associate an EIP with a network address translation (NAT) service only when creating the NAT service. To modify its EIP, you need to delete the NAT service and re-create it with the new EIP. For more information, see the [CreateNatService](#createnatservice) method.                       \
      \    \n\n"
    post:
      operationId: LinkPublicIp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkPublicIpRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkPublicIpResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - PublicIp
  /LinkRouteTable:
    description: 'Associates a Subnet with a route table.<br />

      The Subnet and the route table must be in the same Net. The traffic is routed according to the route table defined within this Net. You can associate a route table with several Subnets.'
    post:
      operationId: LinkRouteTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkRouteTableRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkRouteTableResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - RouteTable
  /LinkVirtualGateway:
    description: Attaches a virtual gateway to a Net.
    post:
      operationId: LinkVirtualGateway
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkVirtualGatewayRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkVirtualGatewayResponse'
          description: The HTTP 200 response (OK).
      tags:
      - VirtualGateway
  /LinkVolume:
    description: 'Attaches a Block Storage Unit (BSU) volume to a virtual machine (VM).<br />

      The volume and the VM must be in the same Subregion. The VM can be running or stopped. The volume is attached to the specified VM device.'
    post:
      operationId: LinkVolume
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkVolumeRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkVolumeResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Volume
  /ReadAdminPassword:
    description: 'Retrieves the administrator password for a Windows running virtual machine (VM).<br />

      The administrator password is encrypted using the keypair you specified when launching the VM.<br /><br />

      **[NOTE]**<br />

      The administrator password is generated only on the first boot of the Windows VM. It is not returned after the first boot.'
    post:
      operationId: ReadAdminPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadAdminPasswordRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAdminPasswordResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /ReadApiLogs:
    description: Retrieves your API logs. Only the logs of the calls made during the last 30 days can be retrieved through this method. You can use filters to retrieve specific logs. You can also specify the information to be displayed in the logs.
    post:
      operationId: ReadApiLogs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadApiLogsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadApiLogsResponse'
          description: The HTTP 200 response (OK).
      tags:
      - ApiLog
  /ReadClientGateways:
    description: 'Describes one or more of your client gateways.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadClientGateways
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadClientGatewaysRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadClientGatewaysResponse'
          description: The HTTP 200 response (OK).
      tags:
      - ClientGateway
  /ReadConsoleOutput:
    description: 'Gets the console output for a virtual machine (VM). This console provides the most recent 64 KiB output.<br /><br />

      **[NOTE]**<br />

      On Windows VMs, the console is handled only on the first boot. It returns no output after the first boot.'
    post:
      operationId: ReadConsoleOutput
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadConsoleOutputRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadConsoleOutputResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /ReadDhcpOptions:
    description: 'Retrieves information about the content of one or more DHCP options sets.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadDhcpOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadDhcpOptionsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadDhcpOptionsResponse'
          description: The HTTP 200 response (OK).
      tags:
      - DhcpOption
  /ReadDirectLinkInterfaces:
    description: 'Lists one or more of your DirectLink interfaces.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `Throttling` error message is returned.'
    post:
      operationId: ReadDirectLinkInterfaces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadDirectLinkInterfacesRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadDirectLinkInterfacesResponse'
          description: The HTTP 200 response (OK).
      tags:
      - DirectLinkInterface
  /ReadDirectLinks:
    description: 'Lists all DirectLinks in the Region.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `Throttling` error message is returned.'
    post:
      operationId: ReadDirectLinks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadDirectLinksRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadDirectLinksResponse'
          description: The HTTP 200 response (OK).
      tags:
      - DirectLink
  /ReadFlexibleGpus:
    description: 'Lists one or more flexible GPUs (fGPUs) allocated to your account.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadFlexibleGpus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadFlexibleGpusRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadFlexibleGpusResponse'
          description: The HTTP 200 response (OK).
      tags:
      - FlexibleGpu
  /ReadImageExportTasks:
    description: 'Lists one or more image export tasks.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadImageExportTasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadImageExportTasksRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadImageExportTasksResponse'
          description: The HTTP 200 response (OK).
      tags:
      - Image
  /ReadImages:
    description: 'Lists one or more Outscale machine images (OMIs) you can use.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadImages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadImagesRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadImagesResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Image
  /ReadInternetServices:
    description: 'Lists one or more of your Internet services.<br />

      An Internet service enables your virtual machines (VMs) launched in a Net to connect to the Internet. By default, a Net includes an Internet service, and each Subnet is public. Every VM launched within a default Subnet has a private and a public IP addresses.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadInternetServices
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadInternetServicesRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadInternetServicesResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - InternetService
  /ReadKeypairs:
    description: 'Lists one or more of your keypairs.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned. '
    post:
      operationId: ReadKeypairs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadKeypairsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadKeypairsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Keypair
  /ReadLoadBalancers:
    description: 'Lists one or more load balancers and their attributes.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadLoadBalancers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadLoadBalancersRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadLoadBalancersResponse'
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /ReadLocations:
    description: 'Lists the locations, corresponding to datacenters, where you can set up a DirectLink.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `Throttling` error message is returned.'
    post:
      operationId: ReadLocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadLocationsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadLocationsResponse'
          description: The HTTP 200 response (OK).
      security: []
      tags:
      - Location
  /ReadNatServices:
    description: "Lists one or more network address translation (NAT) services.<br /><br />\n**[NOTE]**<br />  \nIf you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned."
    post:
      operationId: ReadNatServices
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadNatServicesRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNatServicesResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - NatService
  /ReadNetAccessPointServices:
    description: "Describes 3DS OUTSCALE services available to create Net access points.<br />\nFor more information, see [CreateNetAccessPoint](#createnetaccesspoint).<br /><br />\n**[NOTE]**<br />  \nIf you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned."
    post:
      operationId: ReadNetAccessPointServices
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadNetAccessPointServicesRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNetAccessPointServicesResponse'
          description: The HTTP 200 response (OK).
      security: []
      tags:
      - NetAccessPoint
  /ReadNetAccessPoints:
    description: 'Describes one or more Net access points.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadNetAccessPoints
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadNetAccessPointsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNetAccessPointsResponse'
          description: The HTTP 200 response (OK).
      tags:
      - NetAccessPoint
  /ReadNetPeerings:
    description: 'Lists one or more peering connections between two Nets.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadNetPeerings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadNetPeeringsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNetPeeringsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - NetPeering
  /ReadNets:
    description: "Lists one or more Nets.<br /><br />\n**[NOTE]**<br />\n If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned."
    post:
      operationId: ReadNets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadNetsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNetsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Net
  /ReadNics:
    description: 'Lists one or more network interface cards (NICs).<br />

      A NIC is a virtual network interface that you can attach to a virtual machine (VM) in a Net.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.            '
    post:
      operationId: ReadNics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadNicsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNicsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Nic
  /ReadProductTypes:
    description: 'Describes one or more product types.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadProductTypes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadProductTypesRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadProductTypesResponse'
          description: The HTTP 200 response (OK).
      security: []
      tags:
      - ProductType
  /ReadPublicIpRanges:
    description: Returns the public IPv4 addresses in CIDR notation for the Region specified in the endpoint of the request. For more information, see [Regions, Endpoints and Availability Zones Reference](https://wiki.outscale.net/display/EN/Regions%2C+Endpoints+and+Availability+Zones+Reference).
    post:
      operationId: ReadPublicIpRanges
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadPublicIpRangesRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadPublicIpRangesResponse'
          description: The HTTP 200 response (OK).
      security: []
      tags:
      - PublicIpRange
  /ReadPublicIps:
    description: 'Lists one or more External IP addresses (EIPs) allocated to your account.<br />

      By default, this action returns information about all your EIPs: available, associated with a virtual machine (VM) or network interface card (NIC), or used for a NAT service.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadPublicIps
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadPublicIpsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadPublicIpsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - PublicIp
  /ReadQuotas:
    description: 'Describes one or more of your quotas.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadQuotas
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadQuotasRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadQuotasResponse'
          description: The HTTP 200 response (OK).
      tags:
      - Quota
  /ReadRouteTables:
    description: 'Lists one or more of your route tables.<br />

      In your Net, each Subnet must be associated with a route table. If a Subnet is not explicitly associated with a route table, it is implicitly associated with the main route table of the Net.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadRouteTables
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadRouteTablesRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadRouteTablesResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - RouteTable
  /ReadSecurityGroups:
    description: 'Lists one or more security groups.<br />

      You can specify either the name of the security groups or their IDs.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadSecurityGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadSecurityGroupsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadSecurityGroupsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - SecurityGroup
  /ReadSnapshotExportTasks:
    description: 'Lists one or more snapshot export tasks.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadSnapshotExportTasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadSnapshotExportTasksRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadSnapshotExportTasksResponse'
          description: The HTTP 200 response (OK).
      tags:
      - Snapshot
  /ReadSnapshots:
    description: "Lists one or more snapshots that are available to you and the permissions to create volumes from them.<br /><br />        \n**[NOTE]**<br />\nIf you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.        "
    post:
      operationId: ReadSnapshots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadSnapshotsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadSnapshotsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Snapshot
  /ReadSubnets:
    description: 'Lists one or more of your Subnets.<br />

      If you do not specify any Subnet ID, this action describes all of your Subnets.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadSubnets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadSubnetsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadSubnetsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Subnet
  /ReadSubregions:
    description: 'Lists one or more of the enabled Subregions that you can access in the current Region.<br /><br />

      **[NOTE]**<br />

      - If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.<br />

      - You can use this command to get information about Subregions only in a Region for which you have an account. Otherwise, the `AuthFailure` error message is returned.'
    post:
      operationId: ReadSubregions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadSubregionsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadSubregionsResponse'
          description: The HTTP 200 response (OK).
      tags:
      - Subregion
  /ReadTags:
    description: "Lists one or more tags for your resources.<br /><br />          \n**[NOTE]**<br />\nIf you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned."
    post:
      operationId: ReadTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadTagsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadTagsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Tag
  /ReadVirtualGateways:
    description: 'Lists one or more virtual gateways.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadVirtualGateways
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadVirtualGatewaysRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadVirtualGatewaysResponse'
          description: The HTTP 200 response (OK).
      tags:
      - VirtualGateway
  /ReadVmTypes:
    description: 'Lists one or more predefined VM types.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.'
    post:
      operationId: ReadVmTypes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadVmTypesRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadVmTypesResponse'
          description: The HTTP 200 response (OK).
      security: []
      tags:
      - Vm
  /ReadVms:
    description: "Lists one or more of your virtual machines (VMs).<br />\nIf you provide one or more VM IDs, this action returns a description for all of these VMs. If you do not provide any VM ID, this action returns a description for all of the VMs that belong to you. If you provide an invalid VM ID, an error is returned. If you provide the ID of a VM that does not belong to you, the description of this VM is not included in the response. The refresh interval for data returned by this action is one hour, meaning that a terminated VM may appear in the response.<br /><br />                     \n**[NOTE]**<br />\nIf you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned."
    post:
      operationId: ReadVms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadVmsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadVmsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /ReadVmsHealth:
    description: 'Lists the state of one or more back-end virtual machines (VMs) registered with a specified load balancer.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `Throttling` error message is returned.'
    post:
      operationId: ReadVmsHealth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadVmsHealthRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadVmsHealthResponse'
          description: The HTTP 200 response (OK).
      tags:
      - Health
  /ReadVmsState:
    description: 'Lists the status of one or more virtual machines (VMs).<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned.              '
    post:
      operationId: ReadVmsState
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadVmsStateRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadVmsStateResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /ReadVolumes:
    description: 'Lists one or more specified Block Storage Unit (BSU) volumes.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned. '
    post:
      operationId: ReadVolumes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadVolumesRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadVolumesResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Volume
  /ReadVpnConnections:
    description: 'Describes one or more VPN connections.<br /><br />

      **[NOTE]**<br />

      If you exceed the number of identical requests allowed for a configured time period, the `RequestLimitExceeded` error message is returned. '
    post:
      operationId: ReadVpnConnections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadVpnConnectionsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadVpnConnectionsResponse'
          description: The HTTP 200 response (OK).
      tags:
      - VpnConnection
  /RebootVms:
    description: 'Reboots one or more virtual machines (VMs).<br />

      This operation sends a reboot request to one or more specified VMs. This is an asynchronous action that queues this reboot request. This action only reboots VMs that are valid and that belong to you.'
    post:
      operationId: RebootVms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RebootVmsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RebootVmsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /RegisterVmsInLoadBalancer:
    description: 'Registers one or more virtual machines (VMs) with a specified load balancer.<br />

      The VMs must be running in the same network as the load balancer (in the public Cloud or in the same Net). It may take a little time for a VM to be registered with the load balancer. Once the VM is registered with a load balancer, it receives traffic and requests from this load balancer and is called a back-end VM.'
    post:
      operationId: RegisterVmsInLoadBalancer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterVmsInLoadBalancerRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterVmsInLoadBalancerResponse'
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /RejectNetPeering:
    description: 'Rejects a Net peering connection request.<br />

      The Net peering connection must be in the `pending-acceptance` state to be rejected. The rejected Net peering connection is then in the `rejected` state.'
    post:
      operationId: RejectNetPeering
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectNetPeeringRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RejectNetPeeringResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 409 response (Conflict).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - NetPeering
  /StartVms:
    description: 'Start one or more virtual machines (VMs).<br />

      You can start only VMs that are valid and that belong to you.'
    post:
      operationId: StartVms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartVmsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartVmsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /StopVms:
    description: 'Stops one or more running virtual machines (VMs).<br />

      You can stop only VMs that are valid and that belong to you. Data stored in the VM RAM is lost.'
    post:
      operationId: StopVms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopVmsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopVmsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
  /UnlinkFlexibleGpu:
    description: 'Detaches a flexible GPU (fGPU) from a virtual machine (VM).<br />

      The fGPU is in the `detaching` state until the VM is stopped, after which it becomes available for allocation again.'
    post:
      operationId: UnlinkFlexibleGpu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkFlexibleGpuRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkFlexibleGpuResponse'
          description: The HTTP 200 response (OK).
      tags:
      - FlexibleGpu
  /UnlinkInternetService:
    description: 'Detaches an Internet service from a Net.<br />

      This action disables and detaches an Internet service from a Net. The Net must not contain any running virtual machine (VM) using an External IP address (EIP).'
    post:
      operationId: UnlinkInternetService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkInternetServiceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkInternetServiceResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - InternetService
  /UnlinkNic:
    description: 'Detaches a network interface card (NIC) from a virtual machine (VM).<br />

      The primary NIC cannot be detached.'
    post:
      operationId: UnlinkNic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkNicRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkNicResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Nic
  /UnlinkPrivateIps:
    description: Unassigns one or more secondary private IPs from a network interface card (NIC).
    post:
      operationId: UnlinkPrivateIps
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkPrivateIpsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkPrivateIpsResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Nic
  /UnlinkPublicIp:
    description: "Disassociates an External IP address (EIP) from the virtual machine (VM) or network interface card (NIC) it is associated with.<br /><br />\n**[NOTE]**<br />\nTo disassociate a Public IP from a NAT service, you need to delete the NAT service. For more information, see the [DeleteNatGateway](#deletenatgateway) method. \n"
    post:
      operationId: UnlinkPublicIp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkPublicIpRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkPublicIpResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - PublicIp
  /UnlinkRouteTable:
    description: 'Disassociates a Subnet from a route table.<br />

      After disassociation, the Subnet can no longer use the routes in this route table, but uses the routes in the main route table of the Net instead.'
    post:
      operationId: UnlinkRouteTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkRouteTableRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkRouteTableResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - RouteTable
  /UnlinkVirtualGateway:
    description: 'Detaches a virtual gateway from a Net.<br />

      You must wait until the virtual gateway is in the detached state before you can attach another Net to it or delete the Net it was previously attached to.'
    post:
      operationId: UnlinkVirtualGateway
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkVirtualGatewayRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkVirtualGatewayResponse'
          description: The HTTP 200 response (OK).
      tags:
      - VirtualGateway
  /UnlinkVolume:
    description: 'Detaches a Block Storage Unit (BSU) volume from a virtual machine (VM).<br />

      To detach the root device of a VM, this VM must be stopped.'
    post:
      operationId: UnlinkVolume
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkVolumeRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkVolumeResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Volume
  /UpdateFlexibleGpu:
    description: Modifies a flexible GPU (fGPU) behaviour.
    post:
      operationId: UpdateFlexibleGpu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFlexibleGpuRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateFlexibleGpuResponse'
          description: The HTTP 200 response (OK).
      tags:
      - FlexibleGpu
  /UpdateImage:
    description: 'Modifies the specified attribute of an Outscale machine image (OMI).<br />

      You can specify only one attribute at a time. You can modify the permissions to access the OMI by adding or removing account IDs or groups. You can share an OMI with a user that is in the same Region. The user can create a copy of the OMI you shared, obtaining all the rights for the copy of the OMI. For more information, see [CreateImage](#createimage).'
    post:
      operationId: UpdateImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateImageRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateImageResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Image
  /UpdateLoadBalancer:
    description: 'Modifies the specified attributes of a load balancer.<br /><br />

      You can set a new SSL certificate to an SSL or HTTPS listener of a load balancer.<br />

      This certificate replaces any certificate used on the same load balancer and port. <br /><br />

      You can also replace the current set of policies for a load balancer with another specified one.<br />

      If the `PolicyNames` parameter is empty, all current policies are disabled.'
    post:
      operationId: UpdateLoadBalancer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLoadBalancerRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateLoadBalancerResponse'
          description: The HTTP 200 response (OK).
      tags:
      - LoadBalancer
  /UpdateNet:
    description: 'Associates a DHCP options set with a specified Net. '
    post:
      operationId: UpdateNet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNetRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateNetResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Net
  /UpdateNetAccessPoint:
    description: 'Modifies the attributes of a Net access point.<br />

      This action enables you to add or remove route tables associated with the specified Net access point.'
    post:
      operationId: UpdateNetAccessPoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNetAccessPointRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateNetAccessPointResponse'
          description: The HTTP 200 response (OK).
      tags:
      - NetAccessPoint
  /UpdateNic:
    description: Modifies the specified network interface card (NIC). You can specify only one attribute at a time.
    post:
      operationId: UpdateNic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNicRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateNicResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Nic
  /UpdateRoute:
    description: "Replaces an existing route within a route table in a Net.<br />\nYou must specify one of the following elements as the target:<br /><br />     \n* Net peering connection<br /> \n* NAT virtual machine (VM)<br />\n* Internet service<br />\n* Virtual gateway<br />\n* NAT service<br />\n* Network interface card (NIC)<br /><br />   \nThe routing algorithm is based on the most specific match."
    post:
      operationId: UpdateRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRouteRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRouteResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Route
  /UpdateRoutePropagation:
    description: Configures the propagation of routes to a specified route table of a Net by a virtual gateway.
    post:
      operationId: UpdateRoutePropagation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoutePropagationRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRoutePropagationResponse'
          description: The HTTP 200 response (OK).
      tags:
      - VirtualGateway
  /UpdateSnapshot:
    description: 'Modifies the permissions for a specified snapshot.<br />

      You can add or remove permissions for specified account IDs or groups. You can share a snapshot with a user that is in the same Region. The user can create a copy of the snapshot you shared, obtaining all the rights for the copy of the snapshot.'
    post:
      operationId: UpdateSnapshot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSnapshotRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSnapshotResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Snapshot
  /UpdateSubnet:
    description: Modifies the specified attribute of a subnet.
    post:
      operationId: UpdateSubnet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSubnetRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSubnetResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Subnet
  /UpdateVm:
    description: 'Modifies a specific attribute of a virtual machine (VM).<br />

      You can modify only one attribute at a time. You can modify the `IsSourceDestChecked` attribute only if the VM is in a Net.<br />

      You must stop the VM before modifying the following attributes:<br /><br />

      * `VmType`<br />

      * `UserData`<br />

      * `BsuOptimized`  '
    post:
      operationId: UpdateVm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVmRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVmResponse'
          description: The HTTP 200 response (OK).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 400 response (Bad Request).
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 401 response (Unauthorized).
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The HTTP 500 response (Internal Server Error).
      tags:
      - Vm
security:
- ApiKeyAuth: []
servers:
- url: https://api.{region}.outscale.com/oapi/v0
  variables:
    region:
      default: eu-west-2
      enum:
      - cn-southeast-1
      - eu-west-2
      - us-east-2
      - us-west-1
